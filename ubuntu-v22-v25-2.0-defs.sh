#!/bin/bash

# --- Sz√≠nk√≥dok az Ubuntu st√≠lushoz (Lila/Narancs/Z√∂ld/Piros) ---
PURPLE='\e[1;35m' # Ubuntu lila
ORANGE='\e[1;33m' # A narancs legk√∂zelebbi termin√°l sz√≠nk√≥dja (s√°rga)
GREEN='\e[1;32m' # Siker
RED='\e[1;31m' # Hiba/Figyelem
NC='\e[0m' # Nincs sz√≠n

# --- Glob√°lis v√°ltoz√≥k √©s konfigur√°ci√≥ ---
SCRIPT_VERSION="2.0" # Verzi√≥sz√°m friss√≠tve a robusztus NM telep√≠t√©s miatt
BACKUP_DIR="/root/script_backups"
LOG_FILE="/var/log/ubuntu_setup.log"
SCRIPT_NAME="ubuntu-22-25-defs.sh"

# Napl√≥z√°si funkci√≥
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Hibakezel√©s (Script Exit) - Csak kritikus rendszerellen≈ërz√©sekn√©l!
error_exit() {
    echo -e "${RED}‚ùå KRITIKUS HIBA: $1${NC}" >&2
    log_message "KRITIKUS HIBA: $1"
    exit 1
}

# Ellen≈ërizz√ºk, hogy a szkript root felhaszn√°l√≥k√©nt fut-e
check_root_privileges() {
    if [ "$EUID" -ne 0 ]; then
        error_exit "Ez a szkript root jogosults√°gokat ig√©nyel. K√©rj√ºk, futtassa 'sudo' vagy 'su' haszn√°lat√°val."
    fi
}

# F√ºgg≈ës√©gek ellen≈ërz√©se
check_dependencies() {
    local missing_deps=()
    
    if ! command -v bc &> /dev/null; then
        missing_deps+=("bc")
    fi
    if ! command -v lsb_release &> /dev/null; then
        missing_deps+=("lsb-release")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${ORANGE}‚ö†Ô∏è Hi√°nyz√≥ alapvet≈ë f√ºgg≈ës√©gek telep√≠t√©se: ${missing_deps[*]}${NC}"
        apt update && apt install -y "${missing_deps[@]}" || error_exit "Alapvet≈ë f√ºgg≈ës√©gek (lsb-release/bc) telep√≠t√©se sikertelen"
    fi
}

# Biztons√°gi ment√©s k√∂nyvt√°r l√©trehoz√°sa
setup_backup_dir() {
    mkdir -p "$BACKUP_DIR"
}

# Oper√°ci√≥s rendszer verzi√≥j√°nak √©s k√≥dnev√©nek meghat√°roz√°sa
detect_os_info() {
    if ! command -v lsb_release &> /dev/null; then
        error_exit "Az lsb_release parancs nem el√©rhet≈ë. Telep√≠tsd az lsb-release csomagot."
    fi
    
    OS_VERSION=$(lsb_release -rs)
    OS_CODENAME=$(lsb_release -cs)
    
    if [ -z "$OS_VERSION" ] || [ -z "$OS_CODENAME" ]; then
        error_exit "Nem siker√ºlt meghat√°rozni az oper√°ci√≥s rendszer inform√°ci√≥it."
    fi
    
    echo -e "${GREEN}‚úÖ √âszlelt rendszer: Ubuntu $OS_VERSION ($OS_CODENAME)${NC}"
}

# C√©l Ubuntu verzi√≥ k√≥dnev√©nek meghat√°roz√°sa
set_target_codename() {
    TARGET_CODENAME=""
    
    if [[ "$OS_VERSION" == "22.04" ]]; then
        TARGET_CODENAME="jammy"
    elif (( $(echo "$OS_VERSION >= 22.04" | bc -l 2>/dev/null) )); then
        TARGET_CODENAME="$OS_CODENAME"
        if [[ "$TARGET_CODENAME" == "n/a" || "$TARGET_CODENAME" == "" ]]; then
            TARGET_CODENAME="devel"
        fi
    else
        echo -e "${RED}‚ö†Ô∏è A szkript nem a 22.04 LTS vagy √∫jabb Ubuntu Server rendszert futtatja. A csomagforr√°sok konfigur√°l√°sa hib√°s lehet! Folytat√°s 'jammy' k√≥dn√©vvel (22.04).${NC}"
        TARGET_CODENAME="jammy"
    fi
}

# --- Csomagkezel√©si √©s telep√≠t√©si funkci√≥k (Repo) ---

# Ellen≈ërzi √©s konfigur√°lja az Ubuntu rep√≥kat (El≈ëk√©sz√≠t≈ë ellen≈ërz√©s)
check_and_configure_ubuntu_repos() {
    if ! grep -q "$TARGET_CODENAME main" /etc/apt/sources.list 2>/dev/null; then
        echo -e "${ORANGE}‚öôÔ∏è A sources.list f√°jl hi√°nyos vagy hib√°s. Hozz√°adjuk a(z) '${TARGET_CODENAME}' rep√≥kat.${NC}"
        configure_repos
        if [ $? -ne 0 ]; then
            return 1 # Hiba volt a configure_repos-ban
        fi
        echo -e "${GREEN}‚úÖ A csomaglista friss√≠t√©se sikeres.${NC}"
    fi
    return 0
}

# Csomagforr√°sok konfigur√°l√°sa (1. men√ºpont)
configure_repos() {
    echo -e "${ORANGE}‚öôÔ∏è Csomagforr√°sok konfigur√°l√°sa... C√©l k√≥dn√©v: ${TARGET_CODENAME}${NC}"
    
    local backup_file="$BACKUP_DIR/sources.list.backup.$(date +%Y%m%d_%H%M%S)"
    cp /etc/apt/sources.list "$backup_file" || { echo -e "${RED}‚ùå Hiba: sources.list biztons√°gi ment√©se sikertelen${NC}"; return 1; }
    echo -e "${GREEN}‚úÖ Biztons√°gi ment√©s k√©sz√ºlt: $backup_file${NC}"
    
    cat <<EOF > /etc/apt/sources.list
# Ubuntu rep√≥k - konfigur√°lva a szkript √°ltal ($(date))
deb http://archive.ubuntu.com/ubuntu/ $TARGET_CODENAME main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ $TARGET_CODENAME-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu/ $TARGET_CODENAME-security main restricted universe multiverse
# deb http://archive.ubuntu.com/ubuntu/ $TARGET_CODENAME-backports main restricted universe multiverse
EOF
    
    echo -e "${GREEN}‚úÖ Csomagforr√°sok sikeresen konfigur√°lva '${TARGET_CODENAME}'-re.${NC}"
    log_message "Csomagforr√°sok konfigur√°lva: $TARGET_CODENAME"

    echo "Csomaglista friss√≠t√©se..."
    if ! apt update; then
        echo -e "${RED}‚ùå HIBA A FRISS√çT√âS SOR√ÅN: K√©rj√ºk, ellen≈ërizd a sources.list f√°jlt a h√°l√≥zati be√°ll√≠t√°sok ellen≈ërz√©se ut√°n!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi

    echo -e "${GREEN}‚úÖ Csomaglista friss√≠t√©se sikeresen befejez≈ëd√∂tt a rep√≥k konfigur√°l√°sa ut√°n.${NC}"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    return 0
}

# Rendszer friss√≠t√©se (2. men√ºpont)
update_system() {
    check_and_configure_ubuntu_repos || { read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"; return 1; }
    echo -e "${ORANGE}üîÑ Rendszer friss√≠t√©se...${NC}"
    
    if ! apt update; then
        echo -e "${RED}‚ùå HIBA: Hiba a csomaglist√°k friss√≠t√©se sor√°n. Ellen≈ërizd a h√°l√≥zati kapcsolatot √©s a rep√≥kat!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    if ! apt upgrade -y; then
        echo -e "${RED}‚ùå HIBA: Hiba a csomagok friss√≠t√©se sor√°n. Lehet, hogy megszakadt a let√∂lt√©s, vagy csomag√ºtk√∂z√©s t√∂rt√©nt.${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ A rendszer naprak√©sz.${NC}"
    log_message "Rendszer friss√≠tve"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    return 0
}

# Alapvet≈ë alkalmaz√°sok telep√≠t√©se (3. men√ºpont)
install_basic_apps() {
    check_and_configure_ubuntu_repos || { read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"; return 1; }
    echo -e "${ORANGE}üöÄ Alapvet≈ë alkalmaz√°sok telep√≠t√©se...${NC}"
    
    local basic_packages=("mc" "unzip" "zip" "htop" "curl" "nano" "net-tools" "wget" "sudo")
    
    if ! apt update; then
        echo -e "${RED}‚ùå HIBA: Hiba a csomaglist√°k friss√≠t√©se sor√°n a telep√≠t√©s el≈ëtt.${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    local available_packages=()
    for pkg in "${basic_packages[@]}"; do
        if apt-cache show "$pkg" &>/dev/null; then
            available_packages+=("$pkg")
        else
            echo -e "${ORANGE}‚ö†Ô∏è A(z) '$pkg' csomag nem √©rhet≈ë el a jelenlegi rep√≥kban.${NC}"
        fi
    done
    
    if [ ${#available_packages[@]} -eq 0 ]; then
        echo -e "${RED}‚ùå Egyetlen csomag sem √©rhet≈ë el a telep√≠t√©sre. Ellen≈ërizd a rep√≥kat!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    echo -e "Telep√≠tend≈ë csomagok: ${available_packages[*]}"
    
    if ! apt install -y "${available_packages[@]}"; then
        echo -e "${RED}‚ùå HIBA: Hiba az alapvet≈ë alkalmaz√°sok telep√≠t√©se sor√°n. N√©zz ut√°na a hiba√ºzenetnek!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    # K√ºl√∂n kezelt opcion√°lis csomag
    if apt-cache show bpytop &>/dev/null; then
        echo -e "${ORANGE}üìä bpytop telep√≠t√©se...${NC}"
        apt install -y bpytop || echo -e "${ORANGE}‚ö†Ô∏è bpytop telep√≠t√©se sikertelen, de a t√∂bbi csomag telep√≠tve lett.${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Az alkalmaz√°sok sikeresen telep√≠tve.${NC}"
    log_message "Alapvet≈ë alkalmaz√°sok telep√≠tve"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    return 0
}

# --- NetworkManager Telep√≠t√©s √©s Konfigur√°ci√≥ ---

# NetworkManager √©s NMTUI telep√≠t√©se (4. men√º 1. opci√≥)
install_network_manager() {
    check_and_configure_ubuntu_repos || { read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"; return 1; }
    echo -e "${ORANGE}üöÄ NetworkManager telep√≠t√©se...${NC}"

    local main_package=("network-manager")
    local ui_package=("nmtui")
    
    if ! apt update; then
        echo -e "${RED}‚ùå HIBA: Hiba a csomaglist√°k friss√≠t√©se sor√°n NetworkManager telep√≠t√©se el≈ëtt.${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    # 1. NetworkManager telep√≠t√©se (ez a kritikus)
    if ! apt install -y "${main_package[@]}"; then
        echo -e "${RED}‚ùå KRITIKUS HIBA: A NetworkManager alapcsomag telep√≠t√©se sikertelen!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ NetworkManager alapcsomag sikeresen telep√≠tve.${NC}"

    # 2. NMTUI telep√≠t√©se (ez az opcion√°lis UI, de fontos a k√©nyelem miatt)
    echo -e "${ORANGE}üñ•Ô∏è NMTUI (Text UI) telep√≠t√©se...${NC}"
    if ! apt install -y "${ui_package[@]}"; then
        echo -e "${ORANGE}‚ö†Ô∏è FIGYELEM: Az 'nmtui' csomag telep√≠t√©se sikertelen volt. A NetworkManager funkcionalit√°s att√≥l m√©g m≈±k√∂dik (nmcli), de az NMTUI nem √©rhet≈ë el.${NC}"
    else
        echo -e "${GREEN}‚úÖ NMTUI sikeresen telep√≠tve.${NC}"
    fi

    # NetworkManager enged√©lyez√©se
    systemctl unmask NetworkManager || true
    systemctl enable NetworkManager
    systemctl start NetworkManager

    echo -e "${GREEN}‚úÖ NetworkManager elind√≠tva.${NC}"
    log_message "NetworkManager telep√≠tve (nmtui opcion√°lis)"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    return 0
}

# √Åtv√°lt√°s NetworkManager-re (Netplan konfigur√°ci√≥ m√≥dos√≠t√°sa)
switch_to_network_manager() {
    if ! command -v nmcli &> /dev/null; then
        echo -e "${RED}‚ùå A NetworkManager nincs telep√≠tve. K√©rlek, telep√≠tsd az 1. opci√≥val!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi

    echo -e "${RED}‚ö†Ô∏è FIGYELEM: A NetworkManagerre val√≥ v√°lt√°s letiltja a Netplan-t √©s √∫jraind√≠tja a h√°l√≥zati szolg√°ltat√°sokat!${NC}"
    read -p "$(echo -e "${RED}Biztosan v√°ltasz NetworkManager-re? (y/n): ${NC}")" confirm_switch
    if [[ "$confirm_switch" != "y" && "$confirm_switch" != "Y" ]]; then
        echo -e "${RED}‚ùå V√°lt√°s megszak√≠tva.${NC}"
        return 0
    fi

    echo -e "${ORANGE}‚öôÔ∏è Netplan konfigur√°ci√≥ √°t√°ll√≠t√°sa NetworkManagerre...${NC}"

    local config_file="/etc/netplan/01-netcfg.yaml"
    local backup_file="$BACKUP_DIR/netplan.backup.nm-switch.$(date +%Y%m%d_%H%M%S).yaml"
    
    if [ -f "$config_file" ]; then
        cp "$config_file" "$backup_file" && echo -e "${GREEN}‚úÖ Biztons√°gi ment√©s k√©sz√ºlt: $backup_file${NC}"
    fi

    cat <<EOF > "$config_file"
# This file is set to use NetworkManager for network configuration.
network:
  version: 2
  renderer: NetworkManager
EOF
    
    if ! netplan apply; then
        echo -e "${RED}‚ùå HIBA: Hiba a Netplan konfigur√°ci√≥ alkalmaz√°sa sor√°n. K√©rj√ºk, ellen≈ërizd a YAML f√°jlt, vagy a h√°l√≥zati kapcsolatot!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi

    systemctl restart NetworkManager

    echo -e "${GREEN}‚úÖ Sikeresen √°tv√°ltott√°l NetworkManagerre! A h√°l√≥zati be√°ll√≠t√°sokat most m√°r az NMTUI/NMCLI-vel kell kezelni.${NC}"
    log_message "√Åtv√°lt√°s NetworkManagerre"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
}

# NetworkManager kezel≈ë almen√º
manage_network_manager() {
    if ! command -v nmcli &> /dev/null; then
        echo -e "${RED}‚ùå A NetworkManager nincs telep√≠tve. K√©rlek, telep√≠tsd az 1. opci√≥val!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi

    while true; do
        clear
        echo -e "${PURPLE}--- NetworkManager Kezel√©s ---${NC}"
        
        # NMTUI el√©rhet≈ës√©g√©nek ellen≈ërz√©se
        if command -v nmtui &> /dev/null; then
            echo -e "1. H√°l√≥zati be√°ll√≠t√°sok kezel√©se (nmtui)"
        else
            echo -e "1. H√°l√≥zati be√°ll√≠t√°sok kezel√©se (nmtui) ${RED}(Nincs telep√≠tve)${NC}"
        fi
        
        echo -e "2. Kapcsolatok list√°z√°sa √©s √°llapot (nmcli)"
        echo -e "3. Vissza a H√°l√≥zati Be√°ll√≠t√°sok men√ºbe"
        echo -e "${PURPLE}-------------------------------${NC}"
        read -p "$(echo -e "${ORANGE}V√°lassz egy NetworkManager opci√≥t: ${NC}")" nm_choice

        case $nm_choice in
            1)
                if command -v nmtui &> /dev/null; then
                    echo -e "${ORANGE}üîÑ Elind√≠tjuk az NMTUI (NetworkManager Text User Interface) alkalmaz√°st...${NC}"
                    nmtui
                else
                    echo -e "${RED}‚ùå Az 'nmtui' nincs telep√≠tve. K√©rlek, haszn√°ld az 'nmcli'-t vagy telep√≠tsd √∫jra az 1. men√ºponttal!${NC}"
                    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
                fi
                ;;
            2)
                echo -e "${PURPLE}--- NetworkManager √Ållapot (nmcli) ---${NC}"
                nmcli device
                nmcli connection show
                read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
                ;;
            3) return 0 ;;
            *) echo -e "${RED}√ârv√©nytelen v√°laszt√°s.${NC}"; read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")" ;;
        esac
    done
}

# --- H√°l√≥zati funkci√≥k (Netplan alap√∫) ---

# Netplan f√°jlok list√°z√°sa
list_netplan_files() {
    find /etc/netplan/ -name "*.yaml" -o -name "*.yml" 2>/dev/null
}

# Netplan YAML f√°jl alapvet≈ë strukt√∫r√°j√°nak l√©trehoz√°sa
create_basic_netplan_config() {
    echo -e "${ORANGE}‚öôÔ∏è Alapvet≈ë Netplan konfigur√°ci√≥ l√©trehoz√°sa dhcp4-gyel...${NC}"
    local interface_name=$(ip -o link show | awk -F': ' '$2 != "lo" && $2 !~ /^docker/ && $2 !~ /^veth/ {print $2; exit}')
    if [ -z "$interface_name" ]; then echo -e "${RED}‚ùå Nem tal√°lhat√≥ h√°l√≥zati interf√©sz a Netplan konfigur√°ci√≥hoz!${NC}"; return 1; fi
    local config_file="/etc/netplan/01-netcfg.yaml"
    local backup_file="$BACKUP_DIR/netplan.backup.$(date +%Y%m%d_%H%M%S).yaml"
    if [ -f "$config_file" ]; then cp "$config_file" "$backup_file" && echo -e "${GREEN}‚úÖ Biztons√°gi ment√©s k√©sz√ºlt: $backup_file${NC}"; fi
    mkdir -p /etc/netplan/
    cat <<EOF > "$config_file"
# This file is generated by the setup script.
network:
  version: 2
  renderer: networkd
  ethernets:
    $interface_name:
      dhcp4: true
      dhcp6: false
EOF
    echo -e "${GREEN}‚úÖ Alapvet≈ë Netplan konfigur√°ci√≥ ('$config_file') l√©trehozva a(z) '$interface_name' interf√©szre DHCP-vel.${NC}"
    log_message "Alap Netplan konfigur√°ci√≥ l√©trehozva: $interface_name"
}

apply_netplan_config() {
    echo -e "${ORANGE}üîÑ Netplan konfigur√°ci√≥ ellen≈ërz√©se √©s alkalmaz√°sa...${NC}"
    if ! netplan generate; then 
        echo -e "${RED}‚ùå HIBA: Hiba a Netplan konfigur√°ci√≥ gener√°l√°s√°ban. Ellen≈ërizd a YAML szintaxis√°t!${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    if ! netplan try --timeout 30; then 
        echo -e "${RED}‚ùå HIBA: Hiba a Netplan konfigur√°ci√≥ban. A m√≥dos√≠t√°sok nem ker√ºltek alkalmaz√°sra. Vissza√°ll√°s t√∂rt√©nt.${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    echo -e "${GREEN}‚úÖ Netplan konfigur√°ci√≥ sikeresen alkalmazva.${NC}"
    log_message "Netplan konfigur√°ci√≥ alkalmazva"
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
}

# H√°l√≥zati napl√≥k megjelen√≠t√©se
show_netplan_logs() {
    echo -e "${ORANGE}üìã H√°l√≥zati napl√≥k megjelen√≠t√©se...${NC}"
    
    echo -e "\n${PURPLE}--- 1. systemd-networkd (Netplan) √°llapot √©s napl√≥k ---${NC}"
    if systemctl is-active systemd-networkd &>/dev/null; then
        echo -e "${GREEN}‚úÖ systemd-networkd akt√≠v. Utols√≥ 20 sor:${NC}"
        journalctl -u systemd-networkd -n 20 --no-pager
    else
        echo -e "${RED}‚ùå systemd-networkd inakt√≠v vagy nem fut.${NC}"
    fi
    
    echo -e "\n${PURPLE}--- 2. NetworkManager √°llapot √©s napl√≥k ---${NC}"
    if systemctl is-active NetworkManager &>/dev/null; then
        echo -e "${GREEN}‚úÖ NetworkManager akt√≠v. Utols√≥ 20 sor:${NC}"
        journalctl -u NetworkManager -n 20 --no-pager
    else
        echo -e "${RED}‚ùå NetworkManager inakt√≠v vagy nem fut.${NC}"
    fi
    
    echo -e "\n${PURPLE}--- 3. Aktu√°lis h√°l√≥zati konfigur√°ci√≥ (IP) ---${NC}"
    ip addr show
    
    echo -e "\n${PURPLE}--- 4. √ötv√°laszt√°si t√°bla ---${NC}"
    ip route show
    
    echo -e "\n${PURPLE}--- 5. DNS be√°ll√≠t√°sok (/etc/resolv.conf) ---${NC}"
    cat /etc/resolv.conf 2>/dev/null || echo -e "${RED}Nem siker√ºlt olvasni /etc/resolv.conf${NC}"

    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
}

# H√°l√≥zati Be√°ll√≠t√°sok F≈ëmen√º
show_network_menu() {
    while true; do
        clear
        echo -e "${PURPLE}--- H√°l√≥zati Konfigur√°ci√≥ Kezel√©se ---${NC}"
        
        local renderer=$(grep "renderer:" /etc/netplan/*.yaml 2>/dev/null | head -n 1 | awk '{print $NF}')
        
        echo -e "Jelenlegi renderel≈ë: ${ORANGE}${renderer:-networkd / n/a}${NC}"
        echo -e "${PURPLE}-------------------------------------${NC}"
        
        echo -e "I. NetworkManager Kezel√©s (${GREEN}NMCLI/NMTUI${NC})"
        echo -e "1. NetworkManager Telep√≠t√©se √©s Konfigur√°l√°sa"
        echo -e "2. √Åtv√°lt√°s NetworkManager-re (Netplan m√≥dos√≠t√°sa)"
        echo -e "3. NetworkManager men√º (NMTUI/NMCLI)"
        
        echo -e "${PURPLE}-------------------------------------${NC}"
        
        echo -e "II. Netplan Be√°ll√≠t√°sok (${RED}networkd${NC})"
        echo -e "4. Netplan konfigur√°ci√≥s f√°jl szerkeszt√©se (nano)"
        echo -e "5. H√°l√≥zati interf√©szek list√°z√°sa (ip addr)"
        echo -e "6. H√°l√≥zati napl√≥k megjelen√≠t√©se"
        
        echo -e "${PURPLE}-------------------------------------${NC}"
        echo -e "7. Vissza a f≈ëmen√ºbe"
        echo -e "${PURPLE}-------------------------------------${NC}"
        read -p "$(echo -e "${ORANGE}V√°lassz egy h√°l√≥zati opci√≥t: ${NC}")" net_choice

        case $net_choice in
            1) install_network_manager ;;
            2) switch_to_network_manager ;;
            3) manage_network_manager ;;
            4) 
                local netplan_files=$(list_netplan_files)
                if [ -z "$netplan_files" ]; then
                    create_basic_netplan_config
                    netplan_files=$(list_netplan_files)
                fi
                
                if [ -n "$netplan_files" ]; then
                    nano $netplan_files
                    apply_netplan_config
                else
                    echo -e "${RED}‚ùå Nincs szerkeszthet≈ë Netplan f√°jl${NC}"
                    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
                fi
                ;;
            5) 
                echo -e "${PURPLE}--- H√°l√≥zati interf√©szek √°llapota ---${NC}"
                ip addr show
                read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
                ;;
            6) show_netplan_logs ;;
            7) return 0 ;;
            *) echo -e "${RED}√ârv√©nytelen v√°laszt√°s.${NC}"; read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")" ;;
        esac
    done
}


# --- Felhaszn√°l√≥kezel√©si funkci√≥k ---

list_users() {
    echo -e "${PURPLE}--- Felhaszn√°l√≥k list√°ja ---${NC}"
    awk -F':' '{ if ($7 != "/usr/sbin/nologin" && $7 != "/bin/false") print $1 }' /etc/passwd
    echo -e "${PURPLE}--- Sudo joggal rendelkez≈ë felhaszn√°l√≥k ---${NC}"
    getent group sudo | cut -d: -f4 | tr ',' '\n'
}

delete_user() {
    read -p "$(echo -e "${ORANGE}Add meg a t√∂r√∂lni k√≠v√°nt felhaszn√°l√≥ nev√©t: ${NC}")" user_to_delete
    
    if ! id "$user_to_delete" &>/dev/null; then
        echo -e "${RED}‚ùå A(z) '$user_to_delete' felhaszn√°l√≥ nem l√©tezik${NC}"
        return 1
    fi
    
    if [ "$user_to_delete" == "root" ]; then
        echo -e "${RED}‚ùå A root felhaszn√°l√≥ nem t√∂r√∂lhet≈ë!${NC}"
        return 1
    fi
    
    read -p "$(echo -e "${RED}‚ö†Ô∏è Biztosan t√∂r√∂lni szeretn√©d a(z) '$user_to_delete' felhaszn√°l√≥t √©s a home k√∂nyvt√°r√°t? (y/n): ${NC}")" confirm_delete
    if [[ "$confirm_delete" == "y" || "$confirm_delete" == "Y" ]]; then
        if userdel -r "$user_to_delete" 2>/dev/null; then
            echo -e "${GREEN}‚úÖ A(z) '$user_to_delete' felhaszn√°l√≥ sikeresen t√∂r√∂lve.${NC}"
            log_message "Felhaszn√°l√≥ t√∂r√∂lve: $user_to_delete"
        else
            echo -e "${RED}‚ùå Hiba a felhaszn√°l√≥ t√∂rl√©se sor√°n${NC}"
        fi
    else
        echo -e "${RED}‚ùå Felhaszn√°l√≥ t√∂rl√©se megszak√≠tva.${NC}"
    fi
}

add_user_sudo() {
    read -p "$(echo -e "${ORANGE}Add meg az √∫j felhaszn√°l√≥ nev√©t: ${NC}")" new_user
    
    if id "$new_user" &>/dev/null; then
        echo -e "${ORANGE}‚ö†Ô∏è A(z) '$new_user' felhaszn√°l√≥ m√°r l√©tezik${NC}"
        read -p "$(echo -e "${ORANGE}Szeretn√©d hozz√°adni a sudo csoporthoz? (y/n): ${NC}")" add_sudo
        if [[ "$add_sudo" == "y" || "$add_sudo" == "Y" ]]; then
            usermod -aG sudo "$new_user"
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}‚úÖ A(z) '$new_user' felhaszn√°l√≥ hozz√°adva a sudo csoporthoz.${NC}"
            else
                 echo -e "${RED}‚ùå Hiba a felhaszn√°l√≥ sudo csoporthoz ad√°sa sor√°n.${NC}"
            fi
        fi
        return
    fi
    
    if adduser --gecos "" "$new_user"; then
        usermod -aG sudo "$new_user"
        echo -e "${GREEN}‚úÖ A(z) '$new_user' felhaszn√°l√≥ hozz√°adva √©s a 'sudo' csoporthoz rendelve.${NC}"
        log_message "Felhaszn√°l√≥ l√©trehozva: $new_user (sudo)"
    else
        echo -e "${RED}‚ùå Hiba a felhaszn√°l√≥ l√©trehoz√°sa sor√°n${NC}"
    fi
}

manage_users() {
    while true; do
        clear
        echo -e "${PURPLE}--- Felhaszn√°l√≥kezel√©s ---${NC}"
        echo -e "1. √öj felhaszn√°l√≥ hozz√°ad√°sa √©s sudo be√°ll√≠t√°sa"
        echo -e "2. Felhaszn√°l√≥k list√°z√°sa"
        echo -e "3. Felhaszn√°l√≥ t√∂rl√©se"
        echo -e "4. Vissza a f≈ëmen√ºbe"
        echo -e "${PURPLE}---------------------------${NC}"
        read -p "$(echo -e "${ORANGE}V√°lassz egy felhaszn√°l√≥kezel√©si opci√≥t: ${NC}")" user_choice
        
        case $user_choice in
            1) add_user_sudo ;;
            2) 
                list_users
                read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
                ;;
            3) delete_user ;;
            4) return 0 ;;
            *) echo -e "${RED}√ârv√©nytelen v√°laszt√°s.${NC}"; read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")" ;;
        esac
    done
}

# --- Egy√©b konfigur√°ci√≥s funkci√≥k ---

configure_hostname() {
    local current_hostname=$(hostname)
    echo -e "${ORANGE}Jelenlegi hosztn√©v: $current_hostname${NC}"
    read -p "$(echo -e "${ORANGE}Add meg az √∫j hosztnevet: ${NC}")" new_hostname
    
    if [ -z "$new_hostname" ]; then
        echo -e "${RED}‚ùå A hosztn√©v nem lehet √ºres${NC}"
        return 1
    fi
    
    if hostnamectl set-hostname "$new_hostname"; then
        sed -i "/^127\.0\.1\.1/d" /etc/hosts
        echo -e "127.0.1.1\t$new_hostname.local\t$new_hostname" >> /etc/hosts
        
        echo -e "${GREEN}‚úÖ Hostn√©v be√°ll√≠tva: $new_hostname${NC}"
        echo -e "${ORANGE}‚ö†Ô∏è A v√°ltoz√°sok teljes √©rv√©nyre jut√°s√°hoz lehet, hogy √∫jra kell ind√≠tani a rendszert.${NC}"
        log_message "Hostn√©v m√≥dos√≠tva: $current_hostname -> $new_hostname"
    else
        echo -e "${RED}‚ùå Hiba a hosztn√©v be√°ll√≠t√°sa sor√°n${NC}"
    fi
}

enable_ssh_root() {
    echo -e "${RED}‚ö†Ô∏è FIGYELEM: A root bejelentkez√©s enged√©lyez√©se biztons√°gi kock√°zatot jelent!${NC}"
    echo -e "${ORANGE}Aj√°nlott alternat√≠va: haszn√°lj sudo joggal rendelkez≈ë felhaszn√°l√≥t SSH kulcsokkal.${NC}"
    
    read -p "$(echo -e "${RED}Biztosan folytatod? (y/n): ${NC}")" ssh_choice
    if [[ "$ssh_choice" != "y" && "$ssh_choice" != "Y" ]]; then
        echo -e "${RED}‚ùå M≈±velet megszak√≠tva.${NC}"
        return 1
    fi
    
    local sshd_config="/etc/ssh/sshd_config"
    local backup_file="$BACKUP_DIR/sshd_config.backup.$(date +%Y%m%d_%H%M%S)"
    
    cp "$sshd_config" "$backup_file" && echo -e "${GREEN}‚úÖ Biztons√°gi ment√©s k√©sz√ºlt: $backup_file${NC}"
    
    sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' "$sshd_config"
    
    if ! grep -q "^PermitRootLogin yes" "$sshd_config"; then
        echo "PermitRootLogin yes" >> "$sshd_config"
    fi
    
    if systemctl restart sshd; then
        echo -e "${GREEN}‚úÖ SSH root bejelentkez√©s enged√©lyezve.${NC}"
        log_message "SSH root login enged√©lyezve"
    else
        echo -e "${RED}‚ùå Hiba az SSH szolg√°ltat√°s √∫jraind√≠t√°sa sor√°n${NC}"
    fi
}

# Rendszerinform√°ci√≥k list√°z√°sa (8. men√ºpont)
list_system_info() {
    echo -e "${PURPLE}--- Rendszerinform√°ci√≥k ---${NC}"
    hostnamectl
    
    echo -e "${PURPLE}--- OS inform√°ci√≥ ---${NC}"
    lsb_release -a 2>/dev/null || echo "lsb_release nem el√©rhet≈ë"
    
    echo -e "${PURPLE}--- Kernel inform√°ci√≥ ---${NC}"
    uname -a
    
    echo -e "${PURPLE}--- Mem√≥ria inform√°ci√≥ ---${NC}"
    free -h
    
    echo -e "${PURPLE}--- Lemez haszn√°lat ---${NC}"
    df -h
    
    echo -e "${PURPLE}--- Uptime ---${NC}"
    uptime
    
    read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")" 
}

# Cockpit telep√≠t√©se (9. men√ºpont)
install_cockpit() {
    check_and_configure_ubuntu_repos || { read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"; return 1; }
    echo -e "${ORANGE}üöÄ Cockpit telep√≠t√©se...${NC}"
    
    if ! apt update; then
        echo -e "${RED}‚ùå Hiba a csomaglist√°k friss√≠t√©se sor√°n Cockpit telep√≠t√©s el≈ëtt.${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
    
    if apt install -y cockpit; then
        systemctl enable --now cockpit.socket
        echo -e "${GREEN}‚úÖ Cockpit telep√≠tve √©s fut.${NC}"
        echo "A webes fel√ºlet a k√∂vetkez≈ë c√≠men √©rhet≈ë el: https://$(hostname -I | awk '{print $1}'):9090"
        log_message "Cockpit telep√≠tve"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    else
        echo -e "${RED}‚ùå Hiba a Cockpit telep√≠t√©se sor√°n${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
        return 1
    fi
}

# SSH bejelentkez≈ë sz√∂veg szerkeszt√©se (10. men√ºpont)
edit_ssh_banner() {
    echo -e "${ORANGE}‚úçÔ∏è SSH bejelentkez≈ë sz√∂veg szerkeszt√©se (/etc/issue.net).${NC}"
    
    if ! command -v nano &> /dev/null; then
        echo "A 'nano' szerkeszt≈ë nincs telep√≠tve. Telep√≠tj√ºk..."
        if ! apt update || ! apt install -y nano; then
            echo -e "${RED}‚ùå Nem siker√ºlt telep√≠teni a nano szerkeszt≈ët${NC}"
            read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
            return 1
        fi
    fi
    
    local banner_file="/etc/issue.net"
    local backup_file="$BACKUP_DIR/issue.net.backup.$(date +%Y%m%d_%H%M%S)"
    
    if [ -f "$banner_file" ]; then
        cp "$banner_file" "$backup_file" && echo -e "${GREEN}‚úÖ Biztons√°gi ment√©s k√©sz√ºlt: $backup_file${NC}"
    fi
    
    nano "$banner_file"
    
    local sshd_config="/etc/ssh/sshd_config"
    if grep -q "^Banner" "$sshd_config"; then
        sed -i 's|^Banner.*|Banner /etc/issue.net|' "$sshd_config"
    else
        echo "Banner /etc/issue.net" >> "$sshd_config"
    fi
    
    if systemctl restart sshd; then
        echo -e "${GREEN}‚úÖ SSH bejelentkez≈ë sz√∂veg elmentve √©s be√°ll√≠tva.${NC}"
        log_message "SSH banner m√≥dos√≠tva"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    else
        echo -e "${RED}‚ùå Hiba az SSH szolg√°ltat√°s √∫jraind√≠t√°sa sor√°n${NC}"
        read -p "$(echo -e "${ORANGE}Nyomj Entert a folytat√°shoz...${NC}")"
    fi
}

# F≈ëmen√º megjelen√≠t√©se
show_main_menu() {
    clear
    echo -e "${PURPLE}=========================================${NC}"
    echo -e "${ORANGE}Ubuntu Server Be√°ll√≠t√≥ Szkript $SCRIPT_VERSION${NC}"
    echo -e "(${SCRIPT_NAME})"
    echo -e "${PURPLE}=========================================${NC}"
    echo -e "Oper√°ci√≥s rendszer: Ubuntu ${OS_VERSION} (${OS_CODENAME})"
    echo -e "C√©l k√≥dn√©v: ${TARGET_CODENAME}"
    echo -e "${PURPLE}=========================================${NC}"
    echo -e "1. Csomagforr√°sok konfigur√°l√°sa (${TARGET_CODENAME})"
    echo -e "2. Rendszer friss√≠t√©se (apt update & upgrade)"
    echo -e "3. Alapvet≈ë alkalmaz√°sok telep√≠t√©se"
    echo -e "4. ${GREEN}NetworkManager Telep√≠t√©s √©s H√°l√≥zati Be√°ll√≠t√°sok${NC}"
    echo -e "5. Hostn√©v √©s FQDN be√°ll√≠t√°sa"
    echo -e "6. Felhaszn√°l√≥kezel√©s"
    echo -e "7. SSH root bejelentkez√©s enged√©lyez√©se ${RED}(Nem aj√°nlott)${NC}"
    echo -e "8. Rendszeradatok list√°z√°sa"
    echo -e "9. Cockpit telep√≠t√©se √©s be√°ll√≠t√°sa"
    echo -e "10. SSH bejelentkez≈ë sz√∂veg szerkeszt√©se"
    echo -e "11. Kil√©p√©s"
    echo -e "${PURPLE}=========================================${NC}"
    read -p "$(echo -e "${ORANGE}V√°lassz egy opci√≥t: ${NC}")" choice
}

# F≈ë program
main() {
    # Inicializ√°l√°s
    check_root_privileges
    setup_backup_dir
    check_dependencies
    detect_os_info
    set_target_codename
    
    echo -e "${GREEN}‚úÖ Ubuntu Server Be√°ll√≠t√≥ Szkript $SCRIPT_VERSION inicializ√°lva${NC}"
    echo -e "${GREEN}‚úÖ Rendszer: Ubuntu ${OS_VERSION} (${OS_CODENAME})${NC}"
    echo -e "${GREEN}‚úÖ C√©l k√≥dn√©v: ${TARGET_CODENAME}${NC}"
    log_message "Szkript elind√≠tva - Ubuntu $OS_VERSION ($OS_CODENAME)"
    
    sleep 2
    
    # F≈ëmen√º ciklus
    while true; do
        show_main_menu
        case $choice in
            1) configure_repos ;;
            2) update_system ;;
            3) install_basic_apps ;;
            4) show_network_menu ;;
            5) configure_hostname ;;
            6) manage_users ;;
            7) enable_ssh_root ;;
            8) list_system_info ;;
            9) install_cockpit ;;
            10) edit_ssh_banner ;;
            11) 
                echo -e "${ORANGE}üëã Viszl√°t!${NC}"
                log_message "Szkript le√°ll√≠tva"
                exit 0 
                ;;
            *) 
                echo -e "${RED}√ârv√©nytelen v√°laszt√°s. K√©rlek, pr√≥b√°ld √∫jra.${NC}"
                sleep 2
                ;;
        esac
    done
}

# Program ind√≠t√°sa
main "$@"
