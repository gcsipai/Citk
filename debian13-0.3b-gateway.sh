#!/bin/bash

# A szkript futtat√°s√°hoz root jogok sz√ºks√©gesek.
if [ "$EUID" -ne 0 ]; then
    echo "K√©rlek, futtasd a szkriptet 'sudo' paranccsal."
    exit 1
fi

# --- F√úGG≈êS√âGEK √âS H√ÅL√ìZATI ELLEN≈êRZ√âS ---

# F√ºgg≈ës√©gek ellen≈ërz√©se √©s telep√≠t√©se
install_dependencies() {
    local dependencies=("$@")
    local missing_deps=()
    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo "A k√∂vetkez≈ë csomagok hi√°nyoznak a funkci√≥ futtat√°s√°hoz: ${missing_deps[*]}"
        read -p "Szeretn√©d telep√≠teni ≈ëket most? (igen/nem) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ii]gen$ ]]; then
            sudo apt-get update && sudo apt-get install -y "${missing_deps[@]}"
            if [ $? -ne 0 ]; then
                echo "Hiba: A csomagok telep√≠t√©se sikertelen."
                read -n 1 -s -r -p "Nyomj Entert a f≈ëmen√ºbe val√≥ visszat√©r√©shez."
                return 1
            fi
            echo "A hi√°nyz√≥ csomagok telep√≠t√©se befejez≈ëd√∂tt."
        else
            echo "A telep√≠t√©s elmaradt. A funkci√≥ nem fog tudni megfelel≈ëen m≈±k√∂dni."
            read -n 1 -s -r -p "Nyomj Entert a f≈ëmen√ºbe val√≥ visszat√©r√©shez."
            return 1
        fi
    fi
    return 0
}

# Ellen≈ërzi √©s figyelmeztet, ha a NetworkManager fut
check_network_manager() {
    if systemctl is-active --quiet NetworkManager; then
        echo "‚ö†Ô∏è  Figyelem: A NetworkManager szolg√°ltat√°s akt√≠v."
        echo "Egyes manu√°lis h√°l√≥zati be√°ll√≠t√°sok konfliktusba ker√ºlhetnek a NetworkManager-rel."
        echo "Aj√°nlott √°tmenetileg le√°ll√≠tani a m≈±velet v√©grehajt√°sa alatt."
        read -p "Szeretn√©d √°tmenetileg le√°ll√≠tani a NetworkManager-t? (igen/nem) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ii]gen$ ]]; then
            sudo systemctl stop NetworkManager
            echo "‚úÖ A NetworkManager √°tmenetileg le√°ll√≠tva."
            echo "Figyelem: A NetworkManager a rendszer √∫jraind√≠t√°sakor √∫jra elindul."
        else
            echo "‚è≠Ô∏è  A NetworkManager fut√°sa megtartva. A konfliktusok lehet≈ës√©g√©t vedd figyelembe."
        fi
    fi
    return 0
}

# --- F≈ê MEN√ú ---
main_menu() {
    while true; do
        clear
        echo "---------------------------------------------------"
        echo "Komplex h√°l√≥zati √©s t≈±zfal konfigur√°tor Complex IT Group @ Kispest 2025 B√©ta!!!"
        echo "---------------------------------------------------"
        echo "1. Egyszer≈± t≈±zfal be√°ll√≠t√°s (Filtering)"
        echo "2. Komplett t≈±zfal (NAT, Port Forwarding, stb.)"
        echo "3. L2TP/IPsec VPN konfigur√°ci√≥"
        echo "4. DHCP Szerver be√°ll√≠t√°sok"
        echo "5. Squid √©s SquidGuard be√°ll√≠t√°sok"
        echo "6. Webmin telep√≠t√©se"
        echo "0. Kil√©p√©s"
        echo "---------------------------------------------------"
        read -p "V√°laszt√°s: " choice
        case $choice in
            1) simple_firewall_menu ;;
            2) complex_firewall_menu ;;
            3) l2tp_vpn_menu ;;
            4) dhcp_server_menu ;;
            5) squid_menu ;;
            6) install_webmin_menu ;;
            0) echo "üëã  Kil√©p√©s. Viszl√°t!"; exit 0 ;;
            *) echo "√ârv√©nytelen v√°laszt√°s. Nyomj Entert a folytat√°shoz."; read -n 1 -s -r -p "" ;;
        esac
    done
}

# --- 1. Egyszer≈± t≈±zfal (Filtering) ---
simple_firewall_menu() {
    clear
    echo "---------------------------------------------------"
    echo "       1. Egyszer≈± t≈±zfal be√°ll√≠t√°sok"
    echo "---------------------------------------------------"
    echo "Ez egy alapvet≈ë filtering t≈±zfal. Minden nem enged√©lyezett forgalmat blokkol."
    echo "0. F√ºgg≈ës√©gek telep√≠t√©se (nft, ss)"
    echo "1. T≈±zfal be√°ll√≠t√°sa"
    echo "2. Vissza a f≈ëmen√ºbe"
    echo "---------------------------------------------------"
    read -p "V√°laszt√°s: " choice
    case $choice in
        0) install_dependencies "nft" "ss"; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
        1) setup_simple_firewall ;;
        2) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
    esac
}
setup_simple_firewall() {
    if ! install_dependencies "nft" "ss"; then return; fi
    clear
    read -p "Figyelem! Ez a m≈±velet fel√ºl√≠rja a megl√©v≈ë t≈±zfal szab√°lyokat. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "A t≈±zfal szab√°lyok be√°ll√≠t√°sa..."
    nft flush ruleset
    nft add table ip filter
    
    # JAV√çTOTT SOROK - id√©z≈ëjelek haszn√°lata a kapcsos z√°r√≥jelek k√∂r√ºl
    nft 'add chain ip filter input { type filter hook input priority 0; policy drop; }'
    nft 'add chain ip filter output { type filter hook output priority 0; policy accept; }'
    nft 'add chain ip filter forward { type filter hook forward priority 0; policy drop; }'

    nft add rule ip filter input iif lo accept comment "loopback"
    nft add rule ip filter input ct state established,related accept comment "megl√©v≈ë kapcsolatok"

    echo "Fut√≥ szolg√°ltat√°sok felismer√©se √©s enged√©lyez√©se..."
    local services=$(ss -tuln | awk 'NR>1 {print $1,$5}')
    local service_list=()
    local i=1
    while IFS= read -r line; do
        local proto=$(echo "$line" | awk '{print $1}')
        local address=$(echo "$line" | awk '{print $2}')
        local port=$(echo "$address" | awk -F':' '{print $NF}')

        if [[ "$port" =~ ^[0-9]+$ ]]; then
            echo "    $i. √âszlelt szolg√°ltat√°s a $port porton ($proto)."
            service_list+=("$port:$proto")
            i=$((i+1))
        fi
    done <<< "$services"

    echo "---------------------------------------------------"
    read -p "Melyik szolg√°ltat√°sokat szeretn√©d enged√©lyezni? (pl. 1 3 4) " selected_choices
    echo

    for choice in $selected_choices; do
        if [ "$choice" -le "${#service_list[@]}" ] && [ "$choice" -gt 0 ]; then
            local service_info="${service_list[((choice-1))]}"
            local port=$(echo "$service_info" | cut -d':' -f1)
            local proto=$(echo "$service_info" | cut -d':' -f2)
            nft add rule ip filter input meta l4proto "$proto" dport "$port" accept
            echo "‚úÖ Port: $port, Protokoll: $proto enged√©lyezve."
        else
            echo "‚ùå Hiba: √ârv√©nytelen v√°laszt√°s: $choice"
        fi
    done

    echo "‚úÖ Alap√©rtelmezett szab√°lyok be√°ll√≠tva."
    read -p "Szeretn√©l manu√°lisan is hozz√°adni portot? (igen/nem) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Ii]gen$ ]]; then
        setup_simple_firewall_manual
    fi

    echo "‚úÖ T≈±zfal be√°ll√≠t√°sai elk√©sz√ºltek."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_simple_firewall_manual() {
    while true; do
        read -p "Add meg a portsz√°mot (pl. 80, 443): " port_number
        if ! [[ "$port_number" =~ ^[0-9]+$ ]]; then echo "√ârv√©nytelen portsz√°m."; continue; fi

        read -p "Melyik protokollt (tcp/udp/mind)? " protocol
        case $protocol in
            "tcp"|"TCP") nft add rule ip filter input tcp dport "$port_number" accept; echo "‚úÖ TCP port $port_number enged√©lyezve." ;;
            "udp"|"UDP") nft add rule ip filter input udp dport "$port_number" accept; echo "‚úÖ UDP port $port_number enged√©lyezve." ;;
            "mind"|"MIND") nft add rule ip filter input tcp dport "$port_number" accept; nft add rule ip filter input udp dport "$port_number" accept; echo "‚úÖ TCP √©s UDP $port_number enged√©lyezve." ;;
            *) echo "‚ùå √ârv√©nytelen protokoll."; continue ;;
        esac

        read -p "Szeretn√©l m√©g portot hozz√°adni? (igen/nem) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then break; fi
    done
}

# --- 2. Komplett t≈±zfal (NAT, Port Forwarding, stb.) ---
complex_firewall_menu() {
    clear
    echo "---------------------------------------------------"
    echo "      2. Komplett t≈±zfal be√°ll√≠t√°sok"
    echo "---------------------------------------------------"
    echo "0. F√ºgg≈ës√©gek telep√≠t√©se (nft, ip)"
    echo "1. Egyszer≈± filtering t≈±zfal"
    echo "2. Masquerading √©s Port Forwarding (DNAT) be√°ll√≠t√°sa"
    echo "3. Hairpin NAT be√°ll√≠t√°sa"
    echo "4. 1:1 NAT be√°ll√≠t√°sa"
    echo "5. Vissza a f≈ëmen√ºbe"
    echo "---------------------------------------------------"
    read -p "V√°laszt√°s: " choice
    case $choice in
        0) install_dependencies "nft" "ip"; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
        1) setup_simple_firewall ;;
        2) setup_nat_forwarding ;;
        3) setup_hairpin_nat ;;
        4) setup_1_to_1_nat ;;
        5) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
    esac
}
setup_nat_forwarding() {
    if ! install_dependencies "nft" "ip"; then return; fi
    clear
    echo "Port Forwarding √©s Masquerading be√°ll√≠t√°sa"
    echo "Jelenlegi interf√©szek:"
    ip -br a
    read -p "Add meg a bels≈ë h√°l√≥zati interf√©szt (pl. eth0): " internal_if
    read -p "Add meg a k√ºls≈ë h√°l√≥zati interf√©szt (pl. enp1s0): " external_if
    if [ -z "$internal_if" ] || [ -z "$external_if" ]; then echo "‚ùå Az interf√©szek k√∂telez≈ëek."; read -n 1 -s -r -p "Nyomj Entert a visszat√©r√©shez."; return; fi
    
    # Masquerading (SNAT) be√°ll√≠t√°sa
    echo "Masquerading be√°ll√≠t√°sa..."
    nft add table ip nat 2>/dev/null
    nft 'add chain ip nat postrouting { type nat hook postrouting priority 100; }' 2>/dev/null
    nft add rule ip nat postrouting oif "$external_if" masquerade comment "masquerade"
    echo "‚úÖ A bels≈ë h√°l√≥zat m√°r k√©pes internetezni a $external_if interf√©szen kereszt√ºl."

    # Port Forwarding (DNAT) be√°ll√≠t√°sa
    while true; do
        read -p "Szeretn√©l be√°ll√≠tani Port Forwarding-ot (DNAT)? (igen/nem) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then break; fi

        read -p "K√ºls≈ë port: " external_port
        read -p "Bels≈ë IP-c√≠m (pl. 192.168.1.100): " internal_ip
        read -p "Bels≈ë port: " internal_port
        read -p "Protokoll (tcp/udp)? " protocol
        
        echo "P√©lda: a k√ºls≈ë $external_port portra √©rkez≈ë forgalmat a bels≈ë $internal_ip c√≠m $internal_port portj√°ra ir√°ny√≠tjuk √°t."
        nft add table ip nat 2>/dev/null
        nft 'add chain ip nat prerouting { type nat hook prerouting priority -100; }' 2>/dev/null
        nft add rule ip nat prerouting iif "$external_if" meta l4proto "$protocol" dport "$external_port" dnat to "$internal_ip":"$internal_port"
        echo "‚úÖ Port Forwarding be√°ll√≠tva."
    done
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_hairpin_nat() {
    if ! install_dependencies "nft" "ip"; then return; fi
    clear
    echo "Hairpin NAT (reflex√≠v) be√°ll√≠t√°sa"
    read -p "Add meg a k√ºls≈ë IP-c√≠med (publikus IP): " public_ip
    read -p "Add meg a bels≈ë h√°l√≥zati interf√©szed: " internal_if
    read -p "Add meg a bels≈ë szerver IP-c√≠m√©t: " server_ip
    echo "Magyar√°zat: A bels≈ë h√°l√≥zatr√≥l a k√ºls≈ë IP c√≠men kereszt√ºl is el√©red a szolg√°ltat√°saidat."
    nft add table ip nat 2>/dev/null
    nft 'add chain ip nat prerouting { type nat hook prerouting priority -100; }' 2>/dev/null
    nft 'add chain ip nat postrouting { type nat hook postrouting priority 100; }' 2>/dev/null
    nft add rule ip nat prerouting iif "$internal_if" ip daddr "$public_ip" dnat to "$server_ip"
    nft add rule ip nat postrouting iif "$internal_if" ip daddr "$server_ip" masquerade
    echo "‚úÖ Hairpin NAT be√°ll√≠tva."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_1_to_1_nat() {
    if ! install_dependencies "nft" "ip"; then return; fi
    clear
    echo "1:1 NAT be√°ll√≠t√°sa"
    read -p "Add meg a k√ºls≈ë (publikus) IP-c√≠met: " public_ip
    read -p "Add meg a bels≈ë (priv√°t) IP-c√≠met: " private_ip
    echo "P√©lda: A k√ºls≈ë $public_ip c√≠m minden forgalma a bels≈ë $private_ip c√≠mre lesz √°tir√°ny√≠tva."
    nft add table ip nat 2>/dev/null
    nft 'add chain ip nat prerouting { type nat hook prerouting priority -100; }' 2>/dev/null
    nft 'add chain ip nat postrouting { type nat hook postrouting priority 100; }' 2>/dev/null
    nft add rule ip nat prerouting dnat to "$private_ip"
    nft add rule ip nat postrouting snat to "$public_ip"
    echo "‚úÖ 1:1 NAT be√°ll√≠tva."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}

# --- 3. L2TP/IPsec VPN konfigur√°ci√≥ ---
l2tp_vpn_menu() {
    clear
    echo "---------------------------------------------------"
    echo "       3. L2TP/IPsec VPN konfigur√°ci√≥"
    echo "---------------------------------------------------"
    echo "0. F√ºgg≈ës√©gek telep√≠t√©se (strongswan, xl2tpd, nft)"
    echo "1. VPN szerver be√°ll√≠t√°sok (IPsec √©s L2TP)"
    echo "2. Felhaszn√°l√≥k hozz√°ad√°sa"
    echo "3. VPN NAT √©s bels≈ë h√°l√≥zati forgalom be√°ll√≠t√°sa"
    echo "4. Vissza a f≈ëmen√ºbe"
    echo "---------------------------------------------------"
    read -p "V√°laszt√°s: " choice
    case $choice in
        0) install_dependencies "strongswan" "xl2tpd" "nft"; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
        1) setup_l2tp_vpn ;;
        2) add_l2tp_user ;;
        3) setup_vpn_nat ;;
        4) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "" ;;
    esac
}
setup_l2tp_vpn() {
    if ! install_dependencies "strongswan" "xl2tpd"; then return; fi
    clear
    read -p "Figyelem! Ez fel√ºl√≠rhatja a megl√©v≈ë IPsec √©s L2TP konfigur√°ci√≥s f√°jlokat. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "L2TP/IPsec VPN be√°ll√≠t√°sok"
    read -p "Szerver publikus IP c√≠me: " public_ip
    read -p "El≈ëre megosztott kulcs (PSK): " psk
    read -p "VPN kliensek IP tartom√°nya (pl. 10.0.1.1-10.0.1.254): " l2tp_ip_range
    read -p "DNS szerverek (pl. 8.8.8.8, 8.8.4.4): " dns_servers

    # ipsec.conf
    cat <<EOF > /etc/ipsec.conf
config setup
    charondebug="ike 2, knl 2, cfg 2, net 2, esp 2, dmn 2, mgr 2"
conn L2TP-IPsec
    left=%defaultroute
    leftsubnet=0.0.0.0/0
    leftauth=psk
    right=%any
    rightsubnet=10.0.1.0/24
    rightauth=psk
    ike=aes256-sha256-modp2048
    esp=aes256-sha256
    auto=add
    keyexchange=ikev1
    dpdaction=restart
    dpdtimeout=180s
    forceencaps=yes
EOF
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt l√©trehozni az /etc/ipsec.conf f√°jlt."; return; fi

    # ipsec.secrets
    echo "$public_ip %any : PSK \"$psk\"" > /etc/ipsec.secrets
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt l√©trehozni az /etc/ipsec.secrets f√°jlt."; return; fi

    # xl2tpd.conf
    cat <<EOF > /etc/xl2tpd/xl2tpd.conf
[global]
    port = 1701
[lns default]
    ip range = $l2tp_ip_range
    local ip = $public_ip
    require authentication = yes
    name = L2TP-IPsec-VPN
    ppp debug = yes
    pppoptfile = /etc/ppp/options.xl2tpd
EOF
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt l√©trehozni az /etc/xl2tpd/xl2tpd.conf f√°jlt."; return; fi

    # options.xl2tpd
    cat <<EOF > /etc/ppp/options.xl2tpd
ipcp-accept-local
ipcp-accept-remote
ms-dns $dns_servers
asyncmap 0
auth
crtscts
lock
proxyarp
debug
nodefaultroute
mtu 1400
connect-delay 5000
EOF
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt l√©trehozni az /etc/ppp/options.xl2tpd f√°jlt."; return; fi

    echo "‚úÖ L2TP/IPsec VPN konfigur√°ci√≥ elk√©sz√ºlt."
    echo "P√©lda: A VPN kliensek a $l2tp_ip_range tartom√°nyb√≥l kapnak IP-t."
    echo "A sz√ºks√©ges portok: 500 (IKE), 4500 (IPsec NAT-T), 1701 (L2TP)"
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
add_l2tp_user() {
    clear
    echo "√öj felhaszn√°l√≥ hozz√°ad√°sa a VPN-hez"
    read -p "Felhaszn√°l√≥n√©v: " username
    read -p "Jelsz√≥: " password
    echo "\"$username\" * \"$password\" *" >> /etc/ppp/chap-secrets
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt a felhaszn√°l√≥t hozz√°adni."; return; fi
    echo "‚úÖ A felhaszn√°l√≥ hozz√°adva."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_vpn_nat() {
    if ! install_dependencies "nft" "ip"; then return; fi
    clear
    echo "VPN NAT be√°ll√≠t√°sa"
    echo "Ezzel a be√°ll√≠t√°ssal a VPN kliensek internetezhetnek √©s el√©rhetik a bels≈ë h√°l√≥zatot."
    echo "Jelenlegi interf√©szek:"
    ip -br a
    read -p "Add meg a bels≈ë (LAN) h√°l√≥zati interf√©szt (pl. eth0): " internal_if
    read -p "Add meg a k√ºls≈ë (WAN) h√°l√≥zati interf√©szt (pl. enp1s0): " external_if
    read -p "Add meg a VPN h√°l√≥zatot (pl. 10.0.1.0/24): " vpn_subnet

    if [ -z "$internal_if" ] || [ -z "$external_if" ] || [ -z "$vpn_subnet" ]; then
        echo "‚ùå Hiba: Az √∂sszes mez≈ë kit√∂lt√©se k√∂telez≈ë."
        read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
        return
    fi
    
    # Masquerading a k√ºls≈ë h√°l√≥zat fel√©
    nft add table ip nat 2>/dev/null
    nft 'add chain ip nat postrouting { type nat hook postrouting priority 100; }' 2>/dev/null
    nft add rule ip nat postrouting ip saddr "$vpn_subnet" oifname "$external_if" masquerade
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: A k√ºls≈ë NAT szab√°ly hozz√°ad√°sa sikertelen."; return; fi
    
    # Masquerading a bels≈ë h√°l√≥zat fel√© m√°r nem kell
    #nft add rule ip nat postrouting ip saddr "$vpn_subnet" oifname "$internal_if" masquerade
    echo "‚úÖ A VPN NAT szab√°lyok sikeresen hozz√°adva."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}

# --- 4. DHCP szerver be√°ll√≠t√°sok ---
dhcp_server_menu() {
    clear
    echo "---------------------------------------------------"
    echo "       4. DHCP Szerver be√°ll√≠t√°sok"
    echo "---------------------------------------------------"
    echo "0. F√ºgg≈ës√©gek telep√≠t√©se (isc-dhcp-server, tftpd-hpa, vlan)"
    echo "1. DHCP szerver be√°ll√≠t√°sa (LAN/VLAN)"
    echo "2. Statikus IP c√≠m hozz√°ad√°sa MAC c√≠m alapj√°n"
    echo "3. TFTPd szerver be√°ll√≠t√°sa (PXE boot)"
    echo "4. Vissza a f≈ëmen√ºbe"
    echo "---------------------------------------------------"
    read -p "V√°laszt√°s: " choice
    case $choice in
        0) install_dependencies "isc-dhcp-server" "tftpd-hpa" "vlan"; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
        1) setup_dhcp_server ;;
        2) add_static_ip ;;
        3) setup_tftpd ;;
        4) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "" ;;
    esac
}
setup_dhcp_server() {
    if ! install_dependencies "isc-dhcp-server" "vlan"; then return; fi
    check_network_manager
    clear
    read -p "Figyelem! Ez fel√ºl√≠rhatja a megl√©v≈ë DHCP konfigur√°ci√≥t. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "DHCP szerver be√°ll√≠t√°sa"
    read -p "LAN/VLAN interf√©sz (pl. eth0 vagy eth0.10): " interface
    read -p "H√°l√≥zat (pl. 192.168.1.0): " subnet
    read -p "H√°l√≥zati maszk (pl. 255.255.255.0): " netmask
    read -p "C√≠mkioszt√°si tartom√°ny kezdete (pl. 192.168.1.100): " range_start
    read -p "C√≠mkioszt√°si tartom√°ny v√©ge (pl. 192.168.1.200): " range_end
    read -p "Alap√©rtelmezett √°tj√°r√≥: " router
    read -p "DNS szerverek (pl. 8.8.8.8, 8.8.4.4): " dns
    read -p "B√©rleti id≈ë (m√°sodpercben, pl. 600): " lease_time

    echo "INTERFACESv4=\"$interface\"" > /etc/default/isc-dhcp-server
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt az interf√©sz be√°ll√≠t√°sa."; return; fi

    cat <<EOF > /etc/dhcp/dhcpd.conf
subnet $subnet netmask $netmask {
    range $range_start $range_end;
    option routers $router;
    option domain-name-servers $dns;
    default-lease-time $lease_time;
    max-lease-time $((lease_time * 2));
}
EOF
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt a dhcpd.conf f√°jl l√©trehoz√°sa."; return; fi
    systemctl restart isc-dhcp-server
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: a szolg√°ltat√°s √∫jraind√≠t√°sa sikertelen."; return; fi

    echo "‚úÖ DHCP szerver be√°ll√≠tva a(z) $interface interf√©szen."
    echo "A DHCP szerver portja: 67 (UDP)"
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
add_static_ip() {
    if ! install_dependencies "isc-dhcp-server"; then return; fi
    clear
    echo "Statikus IP c√≠m hozz√°ad√°sa MAC c√≠m alapj√°n"
    echo "Ez a be√°ll√≠t√°s hozz√°ad egy √∫j 'host' bejegyz√©st a dhcpd.conf f√°jlhoz."
    read -p "G√©pn√©v (hostname): " hostname
    read -p "MAC c√≠m (pl. 01:23:45:67:89:ab): " mac
    read -p "Statikus IP c√≠m: " ip

    echo "host $hostname { hardware ethernet $mac; fixed-address $ip; }" >> /etc/dhcp/dhcpd.conf
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: nem siker√ºlt a statikus IP hozz√°ad√°sa."; return; fi
    
    echo "‚úÖ A statikus IP bejegyz√©s hozz√°adva."
    # A DHCP szerver √∫jraind√≠t√°sa a m√≥dos√≠t√°sok √©letbe l√©p√©s√©hez
    sudo systemctl restart isc-dhcp-server
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: a szolg√°ltat√°s √∫jraind√≠t√°sa sikertelen."; return; fi
    echo "‚úÖ DHCP szolg√°ltat√°s √∫jraind√≠tva."

    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_tftpd() {
    if ! install_dependencies "tftpd-hpa"; then return; fi
    check_network_manager
    clear
    read -p "Figyelem! Ez a m≈±velet telep√≠ti √©s konfigur√°lja a TFTPd szervert a PXE boot-hoz. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "TFTPd szerver be√°ll√≠t√°sa"
    local tftproot="/srv/tftp"
    echo "A TFTP gy√∂k√©rk√∂nyvt√°ra: $tftproot"

    mkdir -p "$tftproot"
    chown -R tftpd:tftpd "$tftproot"
    chmod -R 777 "$tftproot"

    # TFTPd konfigur√°ci√≥
    cat <<EOF > /etc/default/tftpd-hpa
TFTP_USERNAME="tftp"
TFTP_DIRECTORY="$tftproot"
TFTP_ADDRESS="0.0.0.0:69"
TFTP_OPTIONS="--secure"
RUN_DAEMON="yes"
EOF

    echo "‚úÖ A TFTPd szerver be√°ll√≠tva."
    echo "A TFTP szerver portja: 69 (UDP)"
    
    sudo systemctl restart tftpd-hpa
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: a TFTPd szolg√°ltat√°s √∫jraind√≠t√°sa sikertelen."; return; fi
    echo "‚úÖ A TFTPd szerver be√°ll√≠tva √©s √∫jraind√≠tva."
    
    read -p "Szeretn√©l PXE be√°ll√≠t√°sokat is hozz√°adni a DHCP szerverhez? (igen/nem) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Ii]gen$ ]]; then
        read -p "PXE boot f√°jl neve (pl. pxelinux.0): " pxe_filename
        read -p "A TFTP szerver IP c√≠me: " next_server_ip
        
        echo "next-server $next_server_ip;" >> /etc/dhcp/dhcpd.conf
        echo "filename \"$pxe_filename\";" >> /etc/dhcp/dhcpd.conf
        
        # A DHCP szerver √∫jraind√≠t√°sa a m√≥dos√≠t√°sok √©letbe l√©p√©s√©hez
        sudo systemctl restart isc-dhcp-server
        if [ $? -ne 0 ]; then echo "‚ùå Hiba: a DHCP szolg√°ltat√°s √∫jraind√≠t√°sa sikertelen."; return; fi
        echo "‚úÖ DHCP szolg√°ltat√°s √∫jraind√≠tva."
    fi
    
    echo "‚úÖ A TFTPd √©s DHCP be√°ll√≠t√°sok elk√©sz√ºltek."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}

# --- 5. Squid √©s SquidGuard ---
squid_menu() {
    clear
    echo "---------------------------------------------------"
    echo "       5. Squid √©s SquidGuard be√°ll√≠t√°sok"
    echo "---------------------------------------------------"
    echo "0. F√ºgg≈ës√©gek telep√≠t√©se (squid, squidguard, curl, gnupg)"
    echo "1. √Åtl√°tsz√≥ proxy be√°ll√≠t√°sa (Transparent Proxy)"
    echo "2. Proxy Auto-Configuration (PAC) f√°jl l√©trehoz√°sa"
    echo "3. Tartalom filter be√°ll√≠t√°sa (SquidGuard)"
    echo "4. Vissza a f≈ëmen√ºbe"
    echo "---------------------------------------------------"
    read -p "V√°laszt√°s: " choice
    case $choice in
        0) install_dependencies "squid" "squidguard" "curl" "gnupg"; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
        1) setup_transparent_proxy ;;
        2) create_pac_file ;;
        3) setup_squidguard ;;
        4) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
    esac
}
setup_transparent_proxy() {
    if ! install_dependencies "nft"; then return; fi
    clear
    read -p "Figyelem! Ez √°tir√°ny√≠tja a bels≈ë h√°l√≥zat 80-as √©s 443-as forgalm√°t a Squid proxyra. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "√Åtl√°tsz√≥ proxy (Transparent Proxy) be√°ll√≠t√°sa"
    read -p "Add meg a bels≈ë h√°l√≥zati interf√©szt (pl. eth0): " internal_if
    read -p "Add meg a Squid proxy portj√°t (alap√©rtelmezett: 3128): " squid_port
    squid_port=${squid_port:-3128}
    
    nft add table ip nat 2>/dev/null
    nft 'add chain ip nat prerouting { type nat hook prerouting priority -100; }' 2>/dev/null
    nft add rule ip nat prerouting iif "$internal_if" tcp dport 80 redirect to "$squid_port" comment "HTTP forgalom √°tir√°ny√≠t√°sa"
    echo "‚úÖ HTTP forgalom √°tir√°ny√≠tva a Squid proxyra."
    echo "A Squid proxy portja: **$squid_port** (TCP)"
    echo "Megjegyz√©s: A HTTPS forgalomhoz k√ºl√∂n Squid be√°ll√≠t√°s sz√ºks√©ges a tan√∫s√≠tv√°nyok miatt."
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
create_pac_file() {
    if ! install_dependencies "squid"; then return; fi
    clear
    echo "Proxy Auto-Configuration (PAC) f√°jl l√©trehoz√°sa"
    read -p "Proxy szerver IP c√≠me vagy hostname-je: " proxy_ip
    read -p "Proxy portja (alap√©rtelmezett: 3128): " proxy_port
    proxy_port=${proxy_port:-3128}

    local pac_content="function FindProxyForURL(url, host) {
    return \"PROXY $proxy_ip:$proxy_port; DIRECT\";
}"
    
    echo "$pac_content" > /var/www/html/proxy.pac
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: A PAC f√°jl l√©trehoz√°sa sikertelen."; return; fi

    echo "‚úÖ A PAC f√°jl l√©trehozva a /var/www/html/proxy.pac √∫tvonalon."
    echo "Web szerver sz√ºks√©ges a PAC f√°jl futtat√°s√°hoz (pl. Apache2)."
    echo "A kliens be√°ll√≠t√°sokn√°l add meg a PAC f√°jl URL-j√©t: http://$proxy_ip/proxy.pac"
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}
setup_squidguard() {
    if ! install_dependencies "squidguard"; then return; fi
    clear
    echo "Tartalom filter (SquidGuard) be√°ll√≠t√°sa"
    echo "Ez a be√°ll√≠t√°s a Squid proxy-val egy√ºttm≈±k√∂dve sz≈±ri a weboldalakat."
    echo "1. Blacklist let√∂lt√©se"
    echo "2. SquidGuard konfigur√°ci√≥"
    echo "3. Vissza a Squid men√ºbe"
    read -p "V√°laszt√°s: " choice
    case $choice in
        1) read -p "A Shalla's Blacklists let√∂lt√©se √©s kicsomagol√°sa. Folytatod? (igen/nem) " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Ii]gen$ ]]; then
                wget -c http://www.shallalist.de/Downloads/shallalist.tar.gz -O /tmp/shallalist.tar.gz
                if [ $? -ne 0 ]; then echo "‚ùå Hiba: A blacklist let√∂lt√©se sikertelen."; return; fi
                tar -xvzf /tmp/shallalist.tar.gz -C /var/lib/squidguard/db/
                if [ $? -ne 0 ]; then echo "‚ùå Hiba: A blacklist kicsomagol√°sa sikertelen."; return; fi
                echo "‚úÖ A blacklist let√∂ltve."
            fi
            ;;
        2)
            echo "A /etc/squidguard/squidGuard.conf f√°jl manu√°lis szerkeszt√©st ig√©nyel."
            echo "P√©lda a be√°ll√≠t√°sra:"
            echo 'acl {'
            echo '    default {'
            echo '        pass !phishing !porno !gambling all'
            echo '    }'
            echo '}'
            read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
            ;;
        3) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
    esac
}

# --- 6. Webmin telep√≠t√©se ---
install_webmin_menu() {
    clear
    echo "---------------------------------------------------"
    echo "       6. Webmin telep√≠t√©se"
    echo "---------------------------------------------------"
    echo "A Webmin egy web alap√∫ interf√©sz a rendszeradminisztr√°ci√≥hoz. A telep√≠t√©shez root jogok sz√ºks√©gesek."
    echo "1. Webmin telep√≠t√©se"
    echo "2. Vissza a f≈ëmen√ºbe"
    read -p "V√°laszt√°s: " choice
    case $choice in
        1) install_webmin ;;
        2) ;;
        *) echo "√ârv√©nytelen v√°laszt√°s."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz." ;;
    esac
}
install_webmin() {
    if ! install_dependencies "gnupg2" "wget" "curl"; then return; fi
    clear
    read -p "Figyelem! A Webmin telep√≠t√©se tov√°bbi t√°rol√≥k hozz√°ad√°s√°t ig√©nyli. Biztosan folytatod? (igen/nem) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ii]gen$ ]]; then return; fi

    echo "Webmin telep√≠t√©se..."
    
    # GPG kulcs let√∂lt√©se a megfelel≈ë helyre (MODERN M√ìDSZER)
    sudo mkdir -p /usr/share/keyrings
    sudo wget -q -O /usr/share/keyrings/webmin.gpg http://www.webmin.com/jcameron-key.asc
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: GPG kulcs let√∂lt√©se sikertelen."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."; return; fi
    echo "‚úÖ GPG kulcs let√∂ltve."

    # Webmin t√°rol√≥ hozz√°ad√°sa a kulccsal
    echo "deb [signed-by=/usr/share/keyrings/webmin.gpg] http://download.webmin.com/download/repository sarge contrib" | sudo tee /etc/apt/sources.list.d/webmin.list
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: Webmin t√°rol√≥ hozz√°ad√°sa sikertelen."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."; return; fi
    echo "‚úÖ Webmin t√°rol√≥ hozz√°adva."

    sudo apt-get update
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: apt friss√≠t√©se sikertelen."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."; return; fi

    sudo apt-get install -y webmin
    if [ $? -ne 0 ]; then echo "‚ùå Hiba: Webmin telep√≠t√©se sikertelen."; read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."; return; fi
    
    echo "‚úÖ Webmin telep√≠tve!"
    echo "A Webmin a k√∂vetkez≈ë porton √©rhet≈ë el: 10000 (TCP)"
    echo "A webes fel√ºlet el√©r√©s√©hez nyisd meg a b√∂ng√©sz≈ëben: https://$(hostname -I | awk '{print $1}'):10000"
    read -n 1 -s -r -p "Nyomj Entert a folytat√°shoz."
}

# --- A szkript elind√≠t√°sa ---
main_menu
