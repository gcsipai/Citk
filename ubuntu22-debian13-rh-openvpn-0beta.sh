#!/bin/bash
## OpenVPN telep√≠t≈ë (Hibajav√≠tott, teljes, MAGYAR v√°ltozat, Z√∂ld sz√≠nekkel)
# Alap: Nyr https://github.com/Nyr/openvpn-install
# Tov√°bbfejlesztette: Gcsipai https://github.com/gcsipai
# Kompatibilit√°s: Ubuntu 22.04/24.04 LTS, Debian 12/13, RHEL-alap√∫ak
# FIX: K√©zi VPN h√°l√≥zat bevitele √©s server.conf gener√°l√°si hiba jav√≠t√°sa.

# --- SZ√çNK√ìDOK (Z√∂ld/Feh√©r) ---
GREEN_BOLD='\033[1;32m'  # F≈ë c√≠mek, sikeres m≈±veletek
WHITE_NORMAL='\033[0;37m' # Inform√°ci√≥k, alc√≠mek
YELLOW_BOLD='\033[1;33m' # Figyelmeztet√©sek, input k√©rd√©sek
RED_BOLD='\033[1;31m'   # Hiba√ºzenetek, kritikus figyelmeztet√©sek
RESET='\033[0m'         # Alap√©rtelmezett sz√≠n vissza√°ll√≠t√°sa

# --- ALAP√âRTELMEZETT BE√ÅLL√çT√ÅSOK ---
DEFAULT_PORT="1194"
DEFAULT_PROTOCOL="udp"
DEFAULT_DNS="2" 
DEFAULT_CLIENT_NAME="kliens"
DEFAULT_OVPN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" 
VPN_NETWORK_CIDR="10.8.0.0/24"
VPN_NETWORK_BASE="10.8.0.0"
EASYRSA_VER="3.2.4" 

# --- GLOB√ÅLIS V√ÅLTOZ√ìK DEKLAR√ÅL√ÅSA ---
ip=""
port=""
protocol=""
client=""
ovpn_dir=""
os=""
group_name=""
local_network_route="" 
dns_server_1="" 
dns_server_2=""

# --- SEG√âDF√úGGV√âNYEK √âS ELLEN≈êRZ√âSEK ---

# 0. pont: Oper√°ci√≥s rendszer detekt√°l√°sa
detect_os() {
    if [[ "$EUID" -ne 0 ]]; then
        echo -e "${RED_BOLD}‚ö†Ô∏è Ezt a telep√≠t≈ët rendszergazdai (root) jogosults√°gokkal kell futtatni. Haszn√°lja a 'sudo bash $0' parancsot.${RESET}"
        exit 1
    fi
    if [[ ! -e /dev/net/tun ]] || ! ( exec 7<>/dev/net/tun ) 2>/dev/null; then
        echo -e "${RED_BOLD}‚ùå A TUN eszk√∂z nem el√©rhet≈ë a rendszeren. Enged√©lyezni kell a futtat√°s el≈ëtt.${RESET}"
        exit 1
    fi

    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        os="${ID:-unknown}"
        
        case "$os" in
            ubuntu|debian)
                group_name="nogroup"
                ;;
            centos|rhel|almalinux|rocky|fedora)
                os="centos"
                group_name="nobody"
                ;;
            *)
                echo -e "${RED_BOLD}‚ùå Nem t√°mogatott disztrib√∫ci√≥: $os${RESET}"
                exit 1
                ;;
        esac
    else
        echo -e "${RED_BOLD}‚ùå Nem tal√°lhat√≥ /etc/os-release f√°jl${RESET}"
        exit 1
    fi
}

# Kliens nev√©nek tiszt√≠t√°sa
sanitize_client_name() {
	unsanitized_client="$1"
	client=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< "$unsanitized_client")
	if [[ -z "$client" ]]; then
		client="$DEFAULT_CLIENT_NAME"
	fi
	echo "$client"
}

# H√°l√≥zati alh√°l√≥zat √©rv√©nyess√©g√©nek ellen≈ërz√©se (csak form√°tum)
validate_subnet() {
    local subnet_cidr="$1"
    # √ârv√©nyes√≠ti a X.Y.Z.0/24 form√°tumot, ahol X.Y.Z.0 priv√°t tartom√°nyban van
    if ! [[ "$subnet_cidr" =~ ^(10|172\.(1[6-9]|2[0-9]|3[0-1])|192\.168)\.[0-9]{1,3}\.0/24$ ]]; then
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen form√°tum. Csak priv√°t X.Y.Z.0/24 tartom√°ny enged√©lyezett (10.x.x.x, 172.16-31.x.x, 192.168.x.x) √©s az utols√≥ oktettnek .0-nak kell lennie!${RESET}"
        return 1
    fi
    return 0
}

# Fejlett H√°l√≥zati √ºtk√∂z√©s ellen≈ërz√©se
check_subnet_conflict() {
    local check_cidr="$1"
    local check_base=$(echo "$check_cidr" | cut -d '/' -f 1)
    
    local_networks=$(ip -4 route show | grep -v 'default' | awk '{print $1}' | grep -vE '^(127|169|172\.17)' | grep /)
    
    for net in $local_networks; do
        if ip route get "$check_base" 2>/dev/null | grep -q "$net"; then
            return 0 # Hiba: √útk√∂z√©s √©szlelve
        fi
    done
    return 1 # Siker: Nincs √ºtk√∂z√©s
}

# H√°l√≥zat felder√≠t√©se, √ºtk√∂z√©sek vizsg√°lata √©s be√°ll√≠t√°s (Jav√≠tott)
setup_vpn_network() {
    echo
    echo -e "${WHITE_NORMAL}--- üåê VPN H√°l√≥zat Be√°ll√≠t√°sa √©s √útk√∂z√©svizsg√°lat ---${RESET}"
    
    local_vpn_cidr="$VPN_NETWORK_CIDR" 
    
    # 1. √útk√∂z√©svizsg√°lat
    if check_subnet_conflict "$local_vpn_cidr"; then
        echo -e "${YELLOW_BOLD}‚ùå √útk√∂z√©s √©szlelve! A(z) $local_vpn_cidr VPN h√°l√≥zat √ºtk√∂zik egy helyi h√°l√≥zattal.${RESET}"
        
        # Javasolt, nem √ºtk√∂z≈ë h√°l√≥zat keres√©se (10.x.0.0/24 tartom√°nyban)
        for i in {8..254}; do
            local_vpn_cidr="10.$i.0.0/24"
            if ! check_subnet_conflict "$local_vpn_cidr"; then
                echo -e "${GREEN_BOLD}‚úÖ Javasolt, nem √ºtk√∂z≈ë VPN h√°l√≥zat: $local_vpn_cidr${RESET}"
                break
            fi
            if [[ $i -eq 254 ]]; then
                echo -e "${RED_BOLD}‚ùå Nem siker√ºlt automatikusan nem √ºtk√∂z≈ë h√°l√≥zatot tal√°lni a 10.x.x.x tartom√°nyban.${RESET}"
                local_vpn_cidr="10.8.0.0/24" 
                break
            fi
        done
    else
        echo -e "${GREEN_BOLD}‚úÖ Az alap√©rtelmezett VPN h√°l√≥zat ($VPN_NETWORK_CIDR) biztons√°gosnak t≈±nik.${RESET}"
    fi

    # 2. K√©zi fel√ºl√≠r√°s opci√≥ (MINDIG MEGJELENIK)
    read -p "$(echo -e "${YELLOW_BOLD}Szeretn√© m√≥dos√≠tani a VPN h√°l√≥zatot? [i/N]: ${RESET}")" modify_network
    
    if [[ "$modify_network" =~ ^[iI]$ ]]; then
        while true; do
            read -p "$(echo -e "${YELLOW_BOLD}Adja meg a k√≠v√°nt VPN h√°l√≥zatot (CIDR form√°tumban, pl. 10.15.0.0/24) [$local_vpn_cidr]: ${RESET}")" custom_vpn_cidr
            [[ -z "$custom_vpn_cidr" ]] && custom_vpn_cidr="$local_vpn_cidr"

            if validate_subnet "$custom_vpn_cidr"; then
                if check_subnet_conflict "$custom_vpn_cidr"; then
                    echo -e "${RED_BOLD}‚ùå A megadott $custom_vpn_cidr h√°l√≥zat √ºtk√∂zik egy helyi h√°l√≥zattal. V√°lasszon m√°st!${RESET}"
                    local_vpn_cidr="$custom_vpn_cidr" 
                else
                    echo -e "${GREEN_BOLD}‚úÖ $custom_vpn_cidr elfogadva.${RESET}"
                    VPN_NETWORK_CIDR="$custom_vpn_cidr"
                    break
                fi
            else
                local_vpn_cidr="$custom_vpn_cidr" 
            fi
        done
    else
        VPN_NETWORK_CIDR="$local_vpn_cidr"
    fi
    
    VPN_NETWORK_BASE=$(echo "$VPN_NETWORK_CIDR" | cut -d '/' -f 1)
}

# Lok√°lis h√°l√≥zat felismer√©se √©s bek√©r√©se (Jav√≠tva a CIDR kinyer√©se)
get_local_network_route() {
    echo
    echo -e "${WHITE_NORMAL}--- Lok√°lis H√°l√≥zat El√©r√©se (opcion√°lis) ---${RESET}"
    local_interface=$(ip route | grep default | awk '{print $5}' | head -n 1)
    
    if [[ -n "$local_interface" ]]; then
        # Lek√©ri az IP c√≠met CIDR-rel (pl. 10.168.0.25/24)
        local_network_cidr_raw=$(ip a show dev "$local_interface" | grep 'inet ' | grep -v '127.0.0.1' | head -1 | awk '{print $2}')
        
        if echo "$local_network_cidr_raw" | grep -qE '^(10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168)'; then
            
            IP=$(echo "$local_network_cidr_raw" | cut -d '/' -f 1)
            MASK=$(echo "$local_network_cidr_raw" | cut -d '/' -f 2)
            local_network_only=""
            
            # Kisz√°m√≠tja a h√°l√≥zati c√≠met (pl. 10.168.0.25/24 -> 10.168.0.0/24)
            if [[ -n "$IP" && -n "$MASK" && "$MASK" -le 32 ]]; then
                # Megb√≠zhat√≥ h√°l√≥zati c√≠m sz√°m√≠t√°s /24 eset√©n
                if [[ "$MASK" -eq 24 ]]; then
                    local_network_only=$(echo "$IP" | cut -d '.' -f 1-3)".0/$MASK"
                else
                    # Ha nem /24, a teljes CIDR-t haszn√°ljuk
                    local_network_only="$local_network_cidr_raw"
                fi
                
                # Ezt a tiszta CIDR-t haszn√°ljuk a push route parancshoz
                if [[ -n "$local_network_only" ]]; then
                    echo -e "üîç √ârz√©kelt lok√°lis h√°l√≥zat: ${GREEN_BOLD}$local_network_only${RESET}"
                    read -p "$(echo -e "${YELLOW_BOLD}Szeretn√©, ha a VPN kliensek el√©rn√©k ezt a lok√°lis h√°l√≥zatot? [i/N]: ${RESET}")" push_local_network
                    
                    if [[ "$push_local_network" =~ ^[iI]$ ]]; then
                        echo -e "${GREEN_BOLD}‚úÖ Hozz√°adva a lok√°lis h√°l√≥zat ($local_network_only) el√©r√©s√©nek be√°ll√≠t√°sa.${RESET}"
                        local_network_route="$local_network_only" 
                    fi
                fi
            fi
        fi
    fi
}

# H√°l√≥zati be√°ll√≠t√°sok bek√©r√©se
get_network_settings() {
    echo
    echo -e "${WHITE_NORMAL}--- üåê H√°l√≥zati Be√°ll√≠t√°sok ---${RESET}"
    
    ip=$(dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null || curl -s ifconfig.me 2>/dev/null || echo "")
    if [[ -z "$ip" ]]; then
        ip=$(ip -4 addr | grep inet | grep -vE '127(\.[0-9]{1,3}){3}' | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n1)
    fi
    
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg a szerver nyilv√°nos IP c√≠m√©t [$ip]: ${RESET}")" custom_ip
    [[ -n "$custom_ip" ]] && ip="$custom_ip"
    
    read -p "$(echo -e "${YELLOW_BOLD}Protokoll (udp/tcp) [$DEFAULT_PROTOCOL]: ${RESET}")" protocol_input
    protocol=${protocol_input,,}
    [[ -z "$protocol" ]] && protocol="$DEFAULT_PROTOCOL"
    until [[ "$protocol" == "udp" || "$protocol" == "tcp" ]]; do
        echo -e "${RED_BOLD}‚ùå Csak 'udp' vagy 'tcp' lehet!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Protokoll (udp/tcp) [$DEFAULT_PROTOCOL]: ${RESET}")" protocol_input
        protocol=${protocol_input,,}
        [[ -z "$protocol" ]] && protocol="$DEFAULT_PROTOCOL"
    done
    
    read -p "$(echo -e "${YELLOW_BOLD}Port [$DEFAULT_PORT]: ${RESET}")" port
    [[ -z "$port" ]] && port="$DEFAULT_PORT"
    until [[ "$port" =~ ^[0-9]+$ && "$port" -le 65535 ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen port sz√°m!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Port [$DEFAULT_PORT]: ${RESET}")" port
        [[ -z "$port" ]] && port="$DEFAULT_PORT"
    done
    
    echo
    echo -e "${WHITE_NORMAL}--- DNS Be√°ll√≠t√°s ---${RESET}"
    echo -e "V√°lasszon DNS szolg√°ltat√≥t:"
    echo -e "  1) Aktu√°lis rendszer DNS"
    echo -e "  2) Google DNS (8.8.8.8, 8.8.4.4)"
    echo -e "  3) Cloudflare DNS (1.1.1.1, 1.0.0.1)"
    echo -e "  4) OpenDNS (208.67.222.222, 208.67.220.220)"
    echo -e "  5) Quad9 DNS (9.9.9.9, 149.112.112.112)"
    echo -e "  6) Egy√©ni DNS megad√°sa (pl. Active Directory)"
    read -p "$(echo -e "${YELLOW_BOLD}DNS v√°laszt√°s [1-6] [$DEFAULT_DNS]: ${RESET}")" dns
    [[ -z "$dns" ]] && dns="$DEFAULT_DNS"
    until [[ "$dns" =~ ^[1-6]$ ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}DNS v√°laszt√°s [1-6] [$DEFAULT_DNS]: ${RESET}")" dns
        [[ -z "$dns" ]] && dns="$DEFAULT_DNS"
    done

    if [[ "$dns" = "6" ]]; then
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg az els≈ëdleges DNS-t: ${RESET}")" dns_server_1
        until [[ "$dns_server_1" =~ ^[0-9]{1,3}(\.[0-9]{1,3}){3}$ ]]; do
            echo -e "${RED_BOLD}‚ùå √ârv√©nytelen IP c√≠m!${RESET}"
            read -p "$(echo -e "${YELLOW_BOLD}Adja meg az els≈ëdleges DNS-t: ${RESET}")" dns_server_1
        done
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg a m√°sodlagos DNS-t (opcion√°lis): ${RESET}")" dns_server_2
    fi
    
    echo
    read -p "$(echo -e "${YELLOW_BOLD}Els≈ë kliens neve [$DEFAULT_CLIENT_NAME]: ${RESET}")" unsanitized_client
    [[ -z "$unsanitized_client" ]] && unsanitized_client="$DEFAULT_CLIENT_NAME"
    client=$(sanitize_client_name "$unsanitized_client")
}

# T≈±zfal be√°ll√≠t√°sa
configure_firewall() {
    local INTERFACE
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)

    echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/99-openvpn-forward.conf
    sysctl -q -p /etc/sysctl.d/99-openvpn-forward.conf
    
    if command -v firewalld >/dev/null 2>&1; then
        echo -e "${WHITE_NORMAL}‚öôÔ∏è Firewalld konfigur√°l√°sa...${RESET}"
        # Masquerade enged√©lyez√©se
        firewall-cmd --add-masquerade --permanent
        # OpenVPN port enged√©lyez√©se a public z√≥n√°ban
        firewall-cmd --zone=public --add-port="$port/$protocol" --permanent
        firewall-cmd --reload
    else 
        echo -e "${WHITE_NORMAL}‚öôÔ∏è Iptables/Netfilter-persistent konfigur√°l√°sa...${RESET}"
        # Masquerade (NAT) a VPN h√°l√≥zat sz√°m√°ra
        iptables -t nat -A POSTROUTING -s "$VPN_NETWORK_CIDR" -j MASQUERADE
        # OpenVPN port enged√©lyez√©se
        iptables -A INPUT -p "$protocol" --dport "$port" -j ACCEPT
        # Forgalom tov√°bb√≠t√°s (Routing) a TUN interface-en kereszt√ºl
        iptables -A FORWARD -s "$VPN_NETWORK_CIDR" -j ACCEPT
        iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
        
        if command -v netfilter-persistent >/dev/null 2>&1; then
            netfilter-persistent save
        fi
        
        if command -v ufw >/dev/null 2>&1; then
             ufw allow "$port/$protocol"
        fi
    fi
}

# client-common.txt l√©trehoz√°sa
get_default_client_common() {
    echo "client
dev tun
proto $protocol
remote $ip $port
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-GCM
ignore-unknown-option block-outside-dns
block-outside-dns
verb 3" > /etc/openvpn/server/client-common.txt
}

# Kliens hozz√°ad√°sa
add_client() {
    echo
    echo -e "${WHITE_NORMAL}--- ‚ûï √öj Kliens Hozz√°ad√°sa ---${RESET}"
    
    if [[ -z "$ovpn_dir" ]]; then
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg a mapp√°t, ahov√° a .ovpn f√°jlok ker√ºljenek [$DEFAULT_OVPN_DIR]: ${RESET}")" ovpn_dir_input
        [[ -z "$ovpn_dir_input" ]] && ovpn_dir="$DEFAULT_OVPN_DIR" || ovpn_dir="$ovpn_dir_input"
        mkdir -p "$ovpn_dir" 2>/dev/null
    fi
    
    if [[ ! -d "$ovpn_dir" ]]; then
        echo -e "${RED_BOLD}‚ùå Hiba: Nem tudtam l√©trehozni a mapp√°t: $ovpn_dir${RESET}"
        return 1
    fi
    
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg az √∫j kliens nev√©t: ${RESET}")" unsanitized_client
    until [[ -n "$unsanitized_client" ]]; do
        echo -e "${RED_BOLD}‚ùå A kliens n√©v nem lehet √ºres!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg az √∫j kliens nev√©t: ${RESET}")" unsanitized_client
    done
    client=$(sanitize_client_name "$unsanitized_client")
    
    if [[ -e "/etc/openvpn/server/easy-rsa/pki/issued/$client.crt" ]]; then
        echo -e "${RED_BOLD}‚ùå A '$client' kliens m√°r l√©tezik!${RESET}"
        return 1
    fi
    
    cd /etc/openvpn/server/easy-rsa/
    ./easyrsa --batch gen-req "$client" nopass
    ./easyrsa --batch sign-req client "$client"
    
    mkdir -p /etc/openvpn/server/easy-rsa/pki/inline/private/
    {
        echo "<ca>"
        cat /etc/openvpn/server/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key
        echo "</key>"
        echo "<tls-crypt>"
        sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
        echo "</tls-crypt>"
    } > /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline
    
    grep -vh '^#' /etc/openvpn/server/client-common.txt /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline > "$ovpn_dir"/"$client".ovpn
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ **$client** kliens hozz√°adva!${RESET}"
    echo -e "${GREEN_BOLD}üìÅ Konfigur√°ci√≥s f√°jl (kliens sz√°m√°ra): ‚û°Ô∏è $ovpn_dir/$client.ovpn${RESET}"
}

# OpenVPN telep√≠t√©s (server.conf gener√°l√°s jav√≠tva)
install_openvpn() {
	detect_os
	
    echo
    echo -e "${WHITE_NORMAL}--- üìÅ Kliensf√°jl helye (.ovpn) ---${RESET}"
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg a mapp√°t, ahov√° a .ovpn f√°jlok ker√ºljenek [$DEFAULT_OVPN_DIR]: ${RESET}")" ovpn_dir_input
    [[ -z "$ovpn_dir_input" ]] && ovpn_dir="$DEFAULT_OVPN_DIR" || ovpn_dir="$ovpn_dir_input"
    mkdir -p "$ovpn_dir" 2>/dev/null
    
    setup_vpn_network
    get_network_settings
    get_local_network_route 
    
	echo
	echo -e "${GREEN_BOLD}‚úÖ OpenVPN telep√≠t√©s kezdete.${RESET}"
	read -n1 -r -p "$(echo -e "${YELLOW_BOLD}Nyomjon meg egy gombot a folytat√°shoz...${RESET}")"

	# --- TELEP√çT√âSI L√âP√âSEK ---
    
    if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then
		apt-get update
		apt-get install -y --no-install-recommends openvpn openssl ca-certificates iptables netfilter-persistent wget
	elif [[ "$os" = "centos" ]]; then
		dnf install -y epel-release
		dnf install -y openvpn openssl ca-certificates tar firewalld wget
	fi

    mkdir -p /etc/openvpn/server/easy-rsa
    cd /etc/openvpn/server/easy-rsa
    wget -O easy-rsa.tgz https://github.com/OpenVPN/easy-rsa/releases/download/v"$EASYRSA_VER"/EasyRSA-"$EASYRSA_VER".tgz
    tar xzf easy-rsa.tgz --strip-components=1
    rm -f easy-rsa.tgz
    
    ./easyrsa init-pki
    ./easyrsa --batch build-ca nopass
    ./easyrsa --batch gen-req server nopass
    ./easyrsa --batch sign-req server server
    ./easyrsa --batch gen-dh 2>/dev/null
    
    cp pki/ca.crt /etc/openvpn/server/
    cp pki/private/server.key /etc/openvpn/server/
    cp pki/issued/server.crt /etc/openvpn/server/
    cp pki/dh.pem /etc/openvpn/server/
    
    openvpn --genkey secret /etc/openvpn/server/tc.key
    get_default_client_common
    
    # server.conf gener√°l√°sa (alap)
    echo "# OpenVPN 2.6 Server Configuration generated by custom script
local $ip
port $port
proto $protocol
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
auth SHA512
tls-crypt tc.key
topology subnet
server $VPN_NETWORK_BASE 255.255.255.0

# Kliens be√°ll√≠t√°sok
push \"redirect-gateway def1 bypass-dhcp\"
" > /etc/openvpn/server/server.conf
	
    # DNS be√°ll√≠t√°sok hozz√°ad√°sa
    case "$dns" in
        1) 
            if grep -q "127.0.0.53" /etc/resolv.conf && command -v systemd-resolve >/dev/null 2>&1; then
                dns_servers=($(systemd-resolve --status | grep "DNS Servers" | awk '{print $3}'))
            else
                dns_servers=($(grep -oP 'nameserver \K[\d\.]+' /etc/resolv.conf | head -2))
            fi
            ;;
        2) dns_servers=("8.8.8.8" "8.8.4.4") ;;
        3) dns_servers=("1.1.1.1" "1.0.0.1") ;;
        4) dns_servers=("208.67.222.222" "208.67.220.220") ;;
        5) dns_servers=("9.9.9.9" "149.112.112.112") ;;
        6) 
            dns_server_2_temp=""
            [[ -n "$dns_server_2" ]] && dns_server_2_temp="$dns_server_2"
            dns_servers=("$dns_server_1" "$dns_server_2_temp")
            ;;
    esac
    
    for dns_server in "${dns_servers[@]}"; do
        if [[ -n "$dns_server" ]]; then
            echo "push \"dhcp-option DNS $dns_server\"" >> /etc/openvpn/server/server.conf
        fi
    done

    # Lok√°lis h√°l√≥zat push hozz√°ad√°sa (a most m√°r biztosan √©rv√©nyes CIDR-rel)
    if [[ -n "$local_network_route" ]]; then
        echo "push \"route $local_network_route\"" >> /etc/openvpn/server/server.conf
    fi

    # Tov√°bb√° a server.conf-hoz
    echo "
user nobody
group $group_name
cipher AES-256-GCM
persist-key
persist-tun
status openvpn-status.log
verb 3" >> /etc/openvpn/server/server.conf
    
    configure_firewall
    
    # Els≈ë kliens l√©trehoz√°sa a telep√≠t√©s v√©g√©n
    cd /etc/openvpn/server/easy-rsa/
    ./easyrsa --batch gen-req "$client" nopass
    ./easyrsa --batch sign-req client "$client"
    
    mkdir -p /etc/openvpn/server/easy-rsa/pki/inline/private/
    {
        echo "<ca>"
        cat /etc/openvpn/server/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key
        echo "</key>"
        echo "<tls-crypt>"
        sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
        echo "</tls-crypt>"
    } > /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline
    
    grep -vh '^#' /etc/openvpn/server/client-common.txt /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline > "$ovpn_dir"/"$client".ovpn

    # CRL gener√°l√°sa
    EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
    cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem
    chmod 644 /etc/openvpn/server/crl.pem
    echo "crl-verify crl.pem" >> /etc/openvpn/server/server.conf
    
    # Szolg√°ltat√°s ind√≠t√°sa
    systemctl daemon-reload
    systemctl enable --now openvpn-server@server.service
    
    # Ellen≈ërizze a st√°tuszt
    if systemctl is-active --quiet openvpn-server@server.service; then
        echo -e "${GREEN_BOLD}üéâ A telep√≠t√©s K√âSZ! Az OpenVPN szerver sikeresen fut!${RESET}"
    else
        echo -e "${RED_BOLD}‚ö†Ô∏è A telep√≠t√©s befejez≈ëd√∂tt, de az OpenVPN szerver nem indult el!${RESET}"
        echo -e "${RED_BOLD}K√©rem ellen≈ërizze a logot: 'systemctl status openvpn-server@server.service'${RESET}"
    fi
    echo -e "${GREEN_BOLD}A konfigur√°ci√≥s f√°jl itt tal√°lhat√≥: ‚û°Ô∏è $ovpn_dir/$client.ovpn${RESET}"
}

# --- F≈ê MEN√ú RENDSZER (klienskezel√©s) ---

# Kliensek list√°z√°sa
list_clients() {
    echo
    echo -e "${WHITE_NORMAL}--- üìã OpenVPN Kliensek List√°ja ---${RESET}"
    
    if [[ ! -f /etc/openvpn/server/easy-rsa/pki/index.txt ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek kliensek vagy az OpenVPN nincs telep√≠tve.${RESET}"
        return 1
    fi
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${YELLOW_BOLD}‚ÑπÔ∏è Nincsenek akt√≠v kliensek.${RESET}"
        return 0
    fi
    
    echo -e "${WHITE_NORMAL}üìä Akt√≠v kliensek (√©rv√©nyes tan√∫s√≠tv√°nnyal):${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    # Visszavont kliensek
    REVOKED_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^R")
    if [[ "$REVOKED_CLIENTS" -gt 0 ]]; then
        echo
        echo -e "${RED_BOLD}üö´ Visszavont kliensek:${RESET}"
        tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^R" | cut -d '=' -f 2 | nl -s ') '
    fi
    
    # Kapcsol√≥dott kliensek
    if [[ -f /etc/openvpn/server/openvpn-status.log ]]; then
        echo
        echo -e "${WHITE_NORMAL}üîó Kapcsol√≥d√°si st√°tusz (utols√≥ log alapj√°n):${RESET}"
        # VPN_NETWORK_BASE haszn√°lata (a szerver.conf-b√≥l kinyerve, vagy alap√©rtelmezett)
        CURRENT_VPN_NETWORK_BASE=$(grep '^server ' /etc/openvpn/server/server.conf | awk '{print $2}' 2>/dev/null || echo "10.8.0.0")
        
        CONNECTED_CLIENTS=$(grep "$CURRENT_VPN_NETWORK_BASE" /etc/openvpn/server/openvpn-status.log 2>/dev/null | wc -l || echo 0)
        
        if [[ "$CONNECTED_CLIENTS" -gt 0 ]]; then
            grep "$CURRENT_VPN_NETWORK_BASE" /etc/openvpn/server/openvpn-status.log 2>/dev/null | awk '{print "  ‚û°Ô∏è " $2 " (" $3 ")"}'
        else
            echo -e "${YELLOW_BOLD}   Nincsenek akt√≠v kapcsolatok.${RESET}"
        fi
    fi
}

# Kliens visszavon√°sa
revoke_client() {
    echo
    echo -e "${WHITE_NORMAL}--- üö´ Kliens Visszavon√°sa ---${RESET}"
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek √©rv√©nyes kliensek!${RESET}"
        return 1
    fi
    
    echo -e "${WHITE_NORMAL}El√©rhet≈ë kliensek:${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a visszavonand√≥ klienst: ${RESET}")" CLIENT_NUMBER
    until [[ "$CLIENT_NUMBER" =~ ^[0-9]+$ && "$CLIENT_NUMBER" -le "$NUMBER_OF_CLIENTS" ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a visszavonand√≥ klienst: ${RESET}")" CLIENT_NUMBER
    done
    
    CLIENT=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENT_NUMBER"p)
    
    cd /etc/openvpn/server/easy-rsa/
    ./easyrsa --batch revoke "$CLIENT"
    EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
    rm -f /etc/openvpn/server/crl.pem
    cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem
    chmod 644 /etc/openvpn/server/crl.pem
    
    systemctl restart openvpn-server@server.service 2>/dev/null
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ **$CLIENT** kliens visszavonva! (Hozz√°f√©r√©s tiltva a CRL-list√°n)${RESET}"
}

# Kliens teljes t√∂rl√©se (√öJ FUNKCI√ì)
delete_client() {
    echo
    echo -e "${WHITE_NORMAL}--- üóëÔ∏è Kliens Teljes T√∂rl√©se ---${RESET}"
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek kliensek a t√∂rl√©shez!${RESET}"
        return 1
    fi
    
    echo -e "${WHITE_NORMAL}El√©rhet≈ë kliensek:${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a t√∂r√∂lni k√≠v√°nt klienst: ${RESET}")" CLIENT_NUMBER
    until [[ "$CLIENT_NUMBER" =~ ^[0-9]+$ && "$CLIENT_NUMBER" -le "$NUMBER_OF_CLIENTS" ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a t√∂r√∂lni k√≠v√°nt klienst: ${RESET}")" CLIENT_NUMBER
    done
    
    CLIENT=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENT_NUMBER"p)
    
    # Meger≈ës√≠t√©s
    echo
    read -p "$(echo -e "${RED_BOLD}‚ö†Ô∏è Biztos, hogy t√∂r√∂lni szeretn√© a(z) '$CLIENT' klienst? (A m≈±velet nem visszavonhat√≥!) [i/N]: ${RESET}")" confirm_delete
    if [[ ! "$confirm_delete" =~ ^[iI]$ ]]; then
        echo -e "${WHITE_NORMAL}‚ÑπÔ∏è T√∂rl√©s megszak√≠tva.${RESET}"
        return 0
    fi
    
    cd /etc/openvpn/server/easy-rsa/
    
    # 1. Kliens visszavon√°sa
    echo -e "${WHITE_NORMAL}üîê Kliens visszavon√°sa...${RESET}"
    ./easyrsa --batch revoke "$CLIENT"
    EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
    rm -f /etc/openvpn/server/crl.pem
    cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem
    chmod 644 /etc/openvpn/server/crl.pem
    
    # 2. Tan√∫s√≠tv√°ny f√°jlok t√∂rl√©se
    echo -e "${WHITE_NORMAL}üóëÔ∏è Tan√∫s√≠tv√°ny f√°jlok t√∂rl√©se...${RESET}"
    rm -f /etc/openvpn/server/easy-rsa/pki/reqs/"$CLIENT".req 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/private/"$CLIENT".key 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/issued/"$CLIENT".crt 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/inline/private/"$CLIENT".inline 2>/dev/null
    
    # 3. .ovpn f√°jl keres√©se √©s t√∂rl√©se
    echo -e "${WHITE_NORMAL}üîç .ovpn f√°jl keres√©se...${RESET}"
    OVPN_FILES=$(find /home /root "$DEFAULT_OVPN_DIR" -name "$CLIENT.ovpn" 2>/dev/null)
    if [[ -n "$OVPN_FILES" ]]; then
        echo -e "${WHITE_NORMAL}üìÅ .ovpn f√°jlok t√∂rl√©se:${RESET}"
        for ovpn_file in $OVPN_FILES; do
            echo -e "  üóëÔ∏è $ovpn_file"
            rm -f "$ovpn_file"
        done
    else
        echo -e "${YELLOW_BOLD}‚ÑπÔ∏è Nem tal√°lhat√≥ .ovpn f√°jl a klienshez.${RESET}"
    fi
    
    systemctl restart openvpn-server@server.service 2>/dev/null
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ **$CLIENT** kliens teljesen t√∂r√∂lve!${RESET}"
    echo -e "${WHITE_NORMAL}  - Visszavonva a hozz√°f√©r√©s${RESET}"
    echo -e "${WHITE_NORMAL}  - Tan√∫s√≠tv√°nyok t√∂r√∂lve${RESET}"
    echo -e "${WHITE_NORMAL}  - Konfigur√°ci√≥s f√°jlok t√∂r√∂lve${RESET}"
}

# OpenVPN elt√°vol√≠t√°sa
remove_openvpn() {
    echo
    echo -e "${WHITE_NORMAL}--- üóëÔ∏è OpenVPN Elt√°vol√≠t√°sa ---${RESET}"
    read -p "$(echo -e "${RED_BOLD}‚ö†Ô∏è Biztos, hogy elt√°vol√≠tja az OpenVPN-t? [i/N]: ${RESET}")" remove
    if [[ "$remove" =~ ^[iI]$ ]]; then
        port=$(grep '^port ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PORT")
        protocol=$(grep '^proto ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PROTOCOL")
        
        systemctl stop openvpn-server@server 2>/dev/null
        systemctl disable openvpn-server@server 2>/dev/null
        
        rm -rf /etc/openvpn/server
        rm -f /etc/sysctl.d/99-openvpn-forward.conf 2>/dev/null
        
        # T≈±zfal szab√°lyok t√∂rl√©se
        if command -v ufw >/dev/null 2>&1; then
            ufw delete allow "$port/$protocol" 2>/dev/null
        fi
        
        if [[ "$os" =~ (ubuntu|debian) ]]; then
            apt-get remove --purge -y openvpn 2>/dev/null
            apt-get autoremove -y 2>/dev/null
        elif [[ "$os" == 'centos' ]]; then
            yum remove -y openvpn 2>/dev/null || dnf remove -y openvpn 2>/dev/null
        fi
        
        echo
        echo -e "${GREEN_BOLD}‚úÖ OpenVPN sikeresen elt√°vol√≠tva!${RESET}"
    else
        echo
        echo -e "${WHITE_NORMAL}‚ÑπÔ∏è Elt√°vol√≠t√°s megszak√≠tva.${RESET}"
    fi
}

# F≈ëmen√º
main_menu() {
    clear
    
    # Aktu√°lis konfigur√°ci√≥ kinyer√©se
    if [[ -f /etc/openvpn/server/server.conf ]]; then
        port=$(grep '^port ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PORT")
        protocol=$(grep '^proto ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PROTOCOL")
        ip=$(grep '^local ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || ip -4 addr | grep inet | grep -vE '127(\.[0-9]{1,3}){3}' | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n1)
        VPN_NETWORK_BASE=$(grep '^server ' /etc/openvpn/server/server.conf | awk '{print $2}' 2>/dev/null || echo "$VPN_NETWORK_BASE")
        VPN_NETWORK_CIDR="$VPN_NETWORK_BASE/24"
    fi
    
    echo -e "${GREEN_BOLD}=========================================="
    echo -e "        üõ°Ô∏è OpenVPN Kezel≈ë Men√º"
    echo -e "=========================================="
    echo -e "   Szerver: $ip ($port/$protocol)"
    echo -e "   VPN H√°l√≥zat: $VPN_NETWORK_CIDR"
    echo -e "==========================================${RESET}"
    echo
    echo -e "${WHITE_NORMAL}V√°lasszon egy opci√≥t:${RESET}"
    echo -e "${WHITE_NORMAL}   1) ‚ûï √öj kliens hozz√°ad√°sa${RESET}"
    echo -e "${WHITE_NORMAL}   2) üìã Kliensek list√°z√°sa (St√°tusz)${RESET}"
    echo -e "${WHITE_NORMAL}   3) üö´ Kliens visszavon√°sa (Hozz√°f. tilt√°s)${RESET}"
    echo -e "${WHITE_NORMAL}   4) üóëÔ∏è Kliens teljes t√∂rl√©se${RESET}"
    echo -e "${WHITE_NORMAL}   5) üîß OpenVPN elt√°vol√≠t√°sa a rendszerr≈ël${RESET}"
    echo -e "${WHITE_NORMAL}   6) üö™ Kil√©p√©s${RESET}"
    echo
    read -p "$(echo -e "${YELLOW_BOLD}Opci√≥: ${RESET}")" option
    until [[ "$option" =~ ^[1-6]$ ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Opci√≥: ${RESET}")" option
    done
    
    case "$option" in
        1) add_client ;;
        2) 
            list_clients
            echo
            read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a folytat√°shoz...${RESET}")"
            ;;
        3) revoke_client ;;
        4) delete_client ;;
        5) remove_openvpn ;;
        6) 
            echo
            echo -e "${GREEN_BOLD}üëã Viszl√°t!${RESET}"
            exit 0
            ;;
    esac
    
    echo
    read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a f≈ëmen√ºh√∂z val√≥ visszat√©r√©shez...${RESET}")"
    main_menu
}

# --- SZKRIPT FUTTAT√ÅSA ---

detect_os 
if [[ ! -e /etc/openvpn/server/server.conf ]]; then
	clear
	echo -e "${GREEN_BOLD}üëã √údv√∂z√∂lj√ºk az OpenVPN Telep√≠t≈ëben!${RESET}"
    echo -e "${WHITE_NORMAL}Ez a szkript interakt√≠van be√°ll√≠tja az OpenVPN szervert.${RESET}"
	install_openvpn
    
    echo
    read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a f≈ëmen√ºh√∂z val√≥ tov√°bbl√©p√©shez...${RESET}")"
    main_menu
else
    main_menu
fi
