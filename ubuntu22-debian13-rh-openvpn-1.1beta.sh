#!/bin/bash
## OpenVPN telep√≠t≈ë (Hibajav√≠tott, teljes, MAGYAR v√°ltozat, Z√∂ld sz√≠nekkel)
# Alap: Nyr https://github.com/Nyr/openvpn-install
# Tov√°bbfejlesztette: Gcsipai https://github.com/gcsipai
#
# ----------------------------------------------------
# üìú KIAD√ÅSI MEGJEGYZ√âS: V1.1 (K√©sz√≠tette: Gcsipai 2025)
# FIX: Fejlett h√°l√≥zati √ºtk√∂z√©svizsg√°lat √©s k√©zi CIDR bevitel
# FIX: Server.conf gener√°l√°si hiba jav√≠t√°sa.
# √öJ: Kliens teljes t√∂rl√©se (visszavon√°s + f√°jlt√∂rl√©s)
# √öJ: Rendszer √°llapot ellen≈ërz√©sek (mem√≥ria, lemez, port)
# FIX: Nem szabv√°nyos karakterhib√°k jav√≠t√°sa a szkriptben (Bash hiba)
# ----------------------------------------------------

# --- SZ√çNK√ìDOK (Z√∂ld/Feh√©r) ---
GREEN_BOLD='\033[1;32m'    # F≈ë c√≠mek, sikeres m≈±veletek
WHITE_NORMAL='\033[0;37m' # Inform√°ci√≥k, alc√≠mek
YELLOW_BOLD='\033[1;33m' # Figyelmeztet√©sek, input k√©rd√©sek
RED_BOLD='\033[1;31m'      # Hiba√ºzenetek, kritikus figyelmeztet√©sek
BLUE_BOLD='\033[1;34m' # Kieg√©sz√≠t≈ë inform√°ci√≥k, ellen≈ërz√©sek
RESET='\033[0m'          # Alap√©rtelmezett sz√≠n vissza√°ll√≠t√°sa

# --- ALAP√âRTELMEZETT BE√ÅLL√çT√ÅSOK ---
DEFAULT_PORT="1194"
DEFAULT_PROTOCOL="udp"
DEFAULT_DNS="2"  
DEFAULT_CLIENT_NAME="kliens"
DEFAULT_OVPN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"  
VPN_NETWORK_CIDR="10.8.0.0/24"
VPN_NETWORK_BASE="10.8.0.0"
EASYRSA_VER="3.2.4"

# --- GLOB√ÅLIS V√ÅLTOZ√ìK ---
ip=""
port=""
protocol=""
client=""
ovpn_dir=""
os=""
group_name=""
local_network_route=""  
dns_server_1=""  
dns_server_2=""

# === JAV√çTOTT ELLEN≈êRZ≈ê FUNKCI√ìK ===

# Napl√≥z√°si f√ºggv√©ny (Ellen≈ërz√∂tt, tiszta)
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "[$timestamp] [$level] $message" >> /var/log/openvpn-installer.log 2>/dev/null
}

# Parancs v√©grehajt√°s hibakezel√©ssel (Ellen≈ërz√∂tt, tiszta)
execute_command() {
    local cmd="$1"
    local description="$2"
    
    echo -e "${WHITE_NORMAL}‚öôÔ∏è $description...${RESET}"
    log_message "INFO" "Executing: $description"
    
    # Pr√≥b√°lja meg a parancsot v√©grehajtani √©s a standard hib√°t a logba √≠rni
    if eval "$cmd" 2>> /var/log/openvpn-installer.log; then
        echo -e "${GREEN_BOLD}‚úÖ $description sikeres${RESET}"
        log_message "SUCCESS" "$description completed"
        return 0
    else
        echo -e "${RED_BOLD}‚ùå $description sikertelen${RESET}"
        log_message "ERROR" "$description failed"
        return 1
    fi
}

# F√ºgg≈ës√©g ellen≈ërz√©se
check_dependencies() {
    local deps=("curl" "wget" "openssl")
    local missing=()
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${YELLOW_BOLD}üì¶ Hi√°nyz√≥ f√ºgg≈ës√©gek telep√≠t√©se: ${missing[*]}${RESET}"
        if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then
            execute_command "apt-get update && apt-get install -y ${missing[*]}" "Hi√°nyz√≥ f√ºgg≈ës√©gek telep√≠t√©se"
        elif [[ "$os" = "centos" ]]; then
            execute_command "dnf install -y ${missing[*]}" "Hi√°nyz√≥ f√ºgg≈ës√©gek telep√≠t√©se"
        fi
    fi
}

# Lemezter√ºlet ellen≈ërz√©s
check_disk_space() {
    local required_mb=500
    # Az awk a KB-ot adja vissza, 1024-gyel elosztva kapjuk meg a MB-ot
    local available_mb=$(df /tmp | awk 'NR==2 {print $4}')
    available_mb=$((available_mb / 1024))
    
    if [[ $available_mb -lt $required_mb ]]; then
        echo -e "${RED_BOLD}‚ùå Kevesebb mint $required_mb MB szabad lemezter√ºlet! (Jelenleg: ${available_mb}MB)${RESET}"
        return 1
    fi
    return 0
}

# Mem√≥ria ellen≈ërz√©s
check_memory() {
    local required_mb=512
    local available_mb=$(free -m | awk 'NR==2{print $7}') # Available memory
    
    if [[ $available_mb -lt $required_mb ]]; then
        echo -e "${YELLOW_BOLD}‚ö†Ô∏è Alacsony mem√≥ria: ${available_mb}MB (Aj√°nlott: ${required_mb}MB)${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Folytatja? [i/N]: ${RESET}")" -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[iI]$ ]]; then
            return 1
        fi
    fi
    return 0
}

# H√°l√≥zati kapcsolat ellen≈ërz√©se
check_network_connectivity() {
    echo -e "${WHITE_NORMAL}üåê H√°l√≥zati kapcsolat ellen≈ërz√©se...${RESET}"
    
    # K√©tf√©le ellen≈ërz√©s, ha az els≈ë DNS alap√∫ ping nem megy √°t
    if execute_command "ping -c 2 -W 3 google.com > /dev/null 2>&1 || ping -c 2 -W 3 8.8.8.8 > /dev/null 2>&1" "H√°l√≥zati el√©rhet≈ës√©g ellen≈ërz√©s"; then
        return 0
    else
        echo -e "${YELLOW_BOLD}‚ö†Ô∏è Nincs stabil internetkapcsolat, a telep√≠t√©s folytat√≥dhat, de a csomaglet√∂lt√©s hib√°s lehet!${RESET}"
        return 0
    fi
}

# Port el√©rhet≈ës√©g ellen≈ërz√©se (L√°tsz√≥lagos foglalts√°g)
check_port_availability() {
    local check_port="$1"
    local check_protocol="$2"
    
    # Ellen≈ërizz√ºk, hogy a portot haszn√°lja-e egy program
    if command -v ss >/dev/null 2>&1; then
        if ss -tuln | grep -q ":${check_port}"; then
            echo -e "${RED_BOLD}‚ùå A $check_port port m√°r foglalt!${RESET}"
            return 1
        fi
    elif command -v netstat >/dev/null 2>&1; then
        if netstat -tuln | grep -q ":${check_port}"; then
            echo -e "${RED_BOLD}‚ùå A $check_port port m√°r foglalt!${RESET}"
            return 1
        fi
    fi
    
    return 0
}

# OpenVPN konfigur√°ci√≥ valid√°l√°sa
validate_openvpn_config() {
    local config_file="/etc/openvpn/server/server.conf"
    
    if [[ ! -f "$config_file" ]]; then
        log_message "ERROR" "Missing OpenVPN configuration: $config_file"
        return 1
    fi
    
    local required_files=("ca.crt" "server.crt" "server.key" "dh.pem" "tc.key")
    for file in "${required_files[@]}"; do
        if [[ ! -f "/etc/openvpn/server/$file" ]]; then
            log_message "ERROR" "Missing required file: /etc/openvpn/server/$file"
            return 1
        fi
    done
    
    return 0
}

# Rendszer √°llapot ellen≈ërz√©se
system_health_check() {
    echo -e "${BLUE_BOLD}--- üîç Rendszer √Ållapot Ellen≈ërz√©s ---${RESET}"
    local health_ok=0
    
    if ! check_memory || ! check_disk_space; then
        health_ok=1
    fi
    
    check_dependencies
    
    if [[ $health_ok -eq 1 ]]; then
        echo -e "${RED_BOLD}‚ùå A rendszer nem felel meg a minim√°lis k√∂vetelm√©nyeknek!${RESET}"
        return 1
    fi
    
    echo -e "${GREEN_BOLD}‚úÖ Rendszer √°llapot megfelel≈ë${RESET}"
    return 0
}

# === MEGL√âV≈ê FUNKCI√ìK JAV√çTOTT VERZI√ìI ===

# Oper√°ci√≥s rendszer detekt√°l√°sa (jav√≠tott)
detect_os() {
    if [[ "$EUID" -ne 0 ]]; then
        echo -e "${RED_BOLD}‚ö†Ô∏è Ezt a telep√≠t≈ët rendszergazdai (root) jogosults√°gokkal kell futtatni. Haszn√°lja a 'sudo bash $0' parancsot.${RESET}"
        exit 1
    fi
    
    # TUN eszk√∂z ellen≈ërz√©s
    if [[ ! -e /dev/net/tun ]] || ! ( exec 7<>/dev/net/tun ) 2>/dev/null; then
        echo -e "${RED_BOLD}‚ùå A TUN eszk√∂z nem el√©rhet≈ë. Enged√©lyezze a virtualiz√°ci√≥t!${RESET}"
        echo -e "${WHITE_NORMAL}¬† ¬†P√©lda KVM-en: modprobe tun${RESET}"
        exit 1
    fi

    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        os="${ID:-unknown}"
        
        case "$os" in
            ubuntu|debian)
                group_name="nogroup"
                ;;
            centos|rhel|almalinux|rocky|fedora)
                os="centos"
                group_name="nobody"
                ;;
            *)
                echo -e "${RED_BOLD}‚ùå Nem t√°mogatott disztrib√∫ci√≥: $os${RESET}"
                exit 1
                ;;
        esac
    else
        echo -e "${RED_BOLD}‚ùå Nem tal√°lhat√≥ /etc/os-release f√°jl${RESET}"
        exit 1
    fi
    
    log_message "INFO" "Operating system detected: $os"
}

# Kliens nev√©nek tiszt√≠t√°sa
sanitize_client_name() {
    local unsanitized_client="$1"
    # Csak alfanumerikus karakterek, k√∂t≈ëjelek √©s al√°h√∫z√°sok
    local client=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< "$unsanitized_client")
    
    if [[ -z "$client" ]]; then
        client="$DEFAULT_CLIENT_NAME"
        echo -e "${YELLOW_BOLD}‚ö†Ô∏è √ârv√©nytelen kliensn√©v, alap√©rtelmezett haszn√°lata: $client${RESET}"
    fi
    
    # Max 64 karakter (X.509 limitation)
    if [[ ${#client} -gt 64 ]]; then
        client="${client:0:64}"
        echo -e "${YELLOW_BOLD}‚ö†Ô∏è Kliensn√©v csonkolva 64 karakterre: $client${RESET}"
    fi
    
    echo "$client"
}

# H√°l√≥zati alh√°l√≥zat √©rv√©nyess√©g√©nek ellen≈ërz√©se (csak form√°tum)
validate_subnet() {
    local subnet_cidr="$1"
    # √ârv√©nyes√≠ti a X.Y.Z.0/24 form√°tumot, ahol X.Y.Z.0 priv√°t tartom√°nyban van
    if ! [[ "$subnet_cidr" =~ ^(10|172\.(1[6-9]|2[0-9]|3[0-1])|192\.168)\.[0-9]{1,3}\.0/24$ ]]; then
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen form√°tum. Csak priv√°t X.Y.Z.0/24 tartom√°ny enged√©lyezett (10.x.x.x, 172.16-31.x.x, 192.168.x.x) √©s az utols√≥ oktettnek .0-nak kell lennie!${RESET}"
        return 1
    fi
    return 0
}

# Fejlett H√°l√≥zati √ºtk√∂z√©s ellen≈ërz√©se
check_subnet_conflict() {
    local check_cidr="$1"
    local check_base=$(echo "$check_cidr" | cut -d '/' -f 1)
    
    # Az √∂sszes lok√°lis √∫tvonal kinyer√©se
    local_networks=$(ip -4 route show | grep -v 'default' | awk '{print $1}' | grep -vE '^(127|169|172\.17)' | grep /)
    
    for net in $local_networks; do
        # Megpr√≥b√°lunk √∫tvonalat lek√©rni a VPN h√°l√≥zat b√°zis IP-j√©re a lok√°lis h√°l√≥zatokon kereszt√ºl
        if ip route get "$check_base" 2>/dev/null | grep -q "$net"; then
            log_message "WARNING" "Conflict detected with local network: $net"
            return 0 # Hiba: √útk√∂z√©s √©szlelve
        fi
    done
    return 1 # Siker: Nincs √ºtk√∂z√©s
}

# H√°l√≥zat felder√≠t√©se, √ºtk√∂z√©sek vizsg√°lata √©s be√°ll√≠t√°s (Jav√≠tott)
setup_vpn_network() {
    echo
    echo -e "${WHITE_NORMAL}--- üåê VPN H√°l√≥zat Be√°ll√≠t√°sa √©s √útk√∂z√©svizsg√°lat ---${RESET}"
    
    local_vpn_cidr="$VPN_NETWORK_CIDR"  
    
    # 1. √útk√∂z√©svizsg√°lat
    if check_subnet_conflict "$local_vpn_cidr"; then
        echo -e "${YELLOW_BOLD}‚ùå √útk√∂z√©s √©szlelve! A(z) $local_vpn_cidr VPN h√°l√≥zat √ºtk√∂zik egy helyi h√°l√≥zattal.${RESET}"
        
        # Javasolt, nem √ºtk√∂z≈ë h√°l√≥zat keres√©se (10.x.0.0/24 tartom√°nyban)
        for i in {8..254}; do
            local_vpn_cidr="10.$i.0.0/24"
            if ! check_subnet_conflict "$local_vpn_cidr"; then
                echo -e "${GREEN_BOLD}‚úÖ Javasolt, nem √ºtk√∂z≈ë VPN h√°l√≥zat: $local_vpn_cidr${RESET}"
                break
            fi
            if [[ $i -eq 254 ]]; then
                echo -e "${RED_BOLD}‚ùå Nem siker√ºlt automatikusan nem √ºtk√∂z≈ë h√°l√≥zatot tal√°lni a 10.x.x.x tartom√°nyban.${RESET}"
                local_vpn_cidr="10.8.0.0/24"  
                break
            fi
        done
    else
        echo -e "${GREEN_BOLD}‚úÖ Az alap√©rtelmezett VPN h√°l√≥zat ($VPN_NETWORK_CIDR) biztons√°gosnak t≈±nik.${RESET}"
    fi

    # 2. K√©zi fel√ºl√≠r√°s opci√≥
    read -p "$(echo -e "${YELLOW_BOLD}Szeretn√© m√≥dos√≠tani a VPN h√°l√≥zatot? [i/N]: ${RESET}")" modify_network
    
    if [[ "$modify_network" =~ ^[iI]$ ]]; then
        while true; do
            read -p "$(echo -e "${YELLOW_BOLD}Adja meg a k√≠v√°nt VPN h√°l√≥zatot (CIDR form√°tumban, pl. 10.15.0.0/24) [$local_vpn_cidr]: ${RESET}")" custom_vpn_cidr
            [[ -z "$custom_vpn_cidr" ]] && custom_vpn_cidr="$local_vpn_cidr"

            if validate_subnet "$custom_vpn_cidr"; then
                if check_subnet_conflict "$custom_vpn_cidr"; then
                    echo -e "${RED_BOLD}‚ùå A megadott $custom_vpn_cidr h√°l√≥zat √ºtk√∂zik egy helyi h√°l√≥zattal. V√°lasszon m√°st!${RESET}"
                    local_vpn_cidr="$custom_vpn_cidr"  
                else
                    echo -e "${GREEN_BOLD}‚úÖ $custom_vpn_cidr elfogadva.${RESET}"
                    VPN_NETWORK_CIDR="$custom_vpn_cidr"
                    break
                fi
            else
                local_vpn_cidr="$custom_vpn_cidr"  
            fi
        done
    else
        VPN_NETWORK_CIDR="$local_vpn_cidr"
    fi
    
    VPN_NETWORK_BASE=$(echo "$VPN_NETWORK_CIDR" | cut -d '/' -f 1)
}

# Lok√°lis h√°l√≥zat felismer√©se √©s bek√©r√©se
get_local_network_route() {
    echo
    echo -e "${WHITE_NORMAL}--- Lok√°lis H√°l√≥zat El√©r√©se (opcion√°lis) ---${RESET}"
    local_interface=$(ip route | grep default | awk '{print $5}' | head -n 1)
    
    if [[ -n "$local_interface" ]]; then
        # Lek√©ri az IP c√≠met CIDR-rel (pl. 10.168.0.25/24)
        local_network_cidr_raw=$(ip a show dev "$local_interface" | grep 'inet ' | grep -v '127.0.0.1' | head -1 | awk '{print $2}')
        
        if echo "$local_network_cidr_raw" | grep -qE '^(10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168)'; then
            
            IP=$(echo "$local_network_cidr_raw" | cut -d '/' -f 1)
            MASK=$(echo "$local_network_cidr_raw" | cut -d '/' -f 2)
            local_network_only=""
            
            # Kisz√°m√≠tja a h√°l√≥zati c√≠met
            if [[ -n "$IP" && -n "$MASK" && "$MASK" -le 32 ]]; then
                # /24-n√©l egyszer≈±bb sz√°m√≠t√°s
                if [[ "$MASK" -eq 24 ]]; then
                    local_network_only=$(echo "$IP" | cut -d '.' -f 1-3)".0/$MASK"
                else
                    # Nem /24, a teljes CIDR-t haszn√°ljuk
                    local_network_only="$local_network_cidr_raw"
                fi
                
                if [[ -n "$local_network_only" ]]; then
                    echo -e "üîç √ârz√©kelt lok√°lis h√°l√≥zat: ${GREEN_BOLD}$local_network_only${RESET}"
                    read -p "$(echo -e "${YELLOW_BOLD}Szeretn√©, ha a VPN kliensek el√©rn√©k ezt a lok√°lis h√°l√≥zatot? [i/N]: ${RESET}")" push_local_network
                    
                    if [[ "$push_local_network" =~ ^[iI]$ ]]; then
                        echo -e "${GREEN_BOLD}‚úÖ Hozz√°adva a lok√°lis h√°l√≥zat ($local_network_only) el√©r√©s√©nek be√°ll√≠t√°sa.${RESET}"
                        local_network_route="$local_network_only"  
                    fi
                fi
            fi
        fi
    fi
}

# DNS be√°ll√≠t√°sok hozz√°ad√°sa a server.conf-hoz
add_dns_config() {
    local dns_servers=()
    
    case "$dns" in
        1)  
            if grep -q "127.0.0.53" /etc/resolv.conf && command -v systemd-resolve >/dev/null 2>&1; then
                dns_servers=($(systemd-resolve --status | grep "DNS Servers" | awk '{print $3}'))
            else
                dns_servers=($(grep -oP 'nameserver \K[\d\.]+' /etc/resolv.conf | head -2))
            fi
            ;;
        2) dns_servers=("8.8.8.8" "8.8.4.4") ;;
        3) dns_servers=("1.1.1.1" "1.0.0.1") ;;
        4) dns_servers=("208.67.222.222" "208.67.220.220") ;;
        5) dns_servers=("9.9.9.9" "149.112.112.112") ;;
        6)  
            dns_server_2_temp=""
            [[ -n "$dns_server_2" ]] && dns_server_2_temp="$dns_server_2"
            dns_servers=("$dns_server_1" "$dns_server_2_temp")
            ;;
    esac
    
    for dns_server in "${dns_servers[@]}"; do
        if [[ -n "$dns_server" ]]; then
            echo "push \"dhcp-option DNS $dns_server\"" >> /etc/openvpn/server/server.conf
        fi
    done
}

# H√°l√≥zati be√°ll√≠t√°sok bek√©r√©se (jav√≠tott)
get_network_settings() {
    echo
    echo -e "${WHITE_NORMAL}--- üåê H√°l√≥zati Be√°ll√≠t√°sok ---${RESET}"
    
    # IP c√≠m automatikus felder√≠t√©se
    ip=$(dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null ||  
          curl -s -4 ifconfig.me 2>/dev/null ||  
          curl -s -4 icanhazip.com 2>/dev/null ||
          ip -4 addr | grep inet | grep -vE '127(\.[0-9]{1,3}){3}' | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n1)

    if [[ -z "$ip" ]]; then
        echo -e "${RED_BOLD}‚ùå Nem siker√ºlt automatikusan felder√≠teni az IP c√≠met${RESET}"
        ip="127.0.0.1"
    fi
    
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg a szerver nyilv√°nos IP c√≠m√©t [$ip]: ${RESET}")" custom_ip
    [[ -n "$custom_ip" ]] && ip="$custom_ip"

    # Protokoll v√°laszt√°s
    read -p "$(echo -e "${YELLOW_BOLD}Protokoll (udp/tcp) [$DEFAULT_PROTOCOL]: ${RESET}")" protocol_input
    protocol=${protocol_input,,}
    [[ -z "$protocol" ]] && protocol="$DEFAULT_PROTOCOL"
    
    until [[ "$protocol" == "udp" || "$protocol" == "tcp" ]]; do
        echo -e "${RED_BOLD}‚ùå Csak 'udp' vagy 'tcp' lehet!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Protokoll (udp/tcp) [$DEFAULT_PROTOCOL]: ${RESET}")" protocol_input
        protocol=${protocol_input,,}
        [[ -z "$protocol" ]] && protocol="$DEFAULT_PROTOCOL"
    done
    
    # Port ellen≈ërz√©ssel
    while true; do
        read -p "$(echo -e "${YELLOW_BOLD}Port [$DEFAULT_PORT]: ${RESET}")" port_input
        local current_port="${port_input:-$DEFAULT_PORT}"
        
        if [[ "$current_port" =~ ^[0-9]+$ && "$current_port" -le 65535 && "$current_port" -ge 1 ]]; then
            if check_port_availability "$current_port" "$protocol"; then
                port="$current_port"
                break
            else
                echo -e "${YELLOW_BOLD}Pr√≥b√°ljon m√°sik portot!${RESET}"
            fi
        else
            echo -e "${RED_BOLD}‚ùå √ârv√©nytelen port sz√°m (1-65535)${RESET}"
        fi
    done
    
    echo
    echo -e "${WHITE_NORMAL}--- DNS Be√°ll√≠t√°s ---${RESET}"
    echo -e "V√°lasszon DNS szolg√°ltat√≥t:"
    echo -e "  1) Aktu√°lis rendszer DNS"
    echo -e "  2) Google DNS (8.8.8.8, 8.8.4.4)"
    echo -e "  3) Cloudflare DNS (1.1.1.1, 1.0.0.1)"
    echo -e "  4) OpenDNS (208.67.222.222, 208.67.220.220)"
    echo -e "  5) Quad9 DNS (9.9.9.9, 149.112.112.112)"
    echo -e "  6) Egy√©ni DNS megad√°sa (pl. Active Directory)"
    read -p "$(echo -e "${YELLOW_BOLD}DNS v√°laszt√°s [1-6] [$DEFAULT_DNS]: ${RESET}")" dns
    [[ -z "$dns" ]] && dns="$DEFAULT_DNS"
    until [[ "$dns" =~ ^[1-6]$ ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}DNS v√°laszt√°s [1-6] [$DEFAULT_DNS]: ${RESET}")" dns
        [[ -z "$dns" ]] && dns="$DEFAULT_DNS"
    done

    if [[ "$dns" = "6" ]]; then
        while true; do
            read -p "$(echo -e "${YELLOW_BOLD}Adja meg az els≈ëdleges DNS-t: ${RESET}")" dns_server_1
            if [[ "$dns_server_1" =~ ^[0-9]{1,3}(\.[0-9]{1,3}){3}$ ]]; then
                break
            else
                echo -e "${RED_BOLD}‚ùå √ârv√©nytelen IP c√≠m!${RESET}"
            fi
        done
        
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg a m√°sodlagos DNS-t (opcion√°lis): ${RESET}")" dns_server_2
        if [[ -n "$dns_server_2" ]] && ! [[ "$dns_server_2" =~ ^[0-9]{1,3}(\.[0-9]{1,3}){3}$ ]]; then
            echo -e "${YELLOW_BOLD}‚ö†Ô∏è A m√°sodlagos DNS IP c√≠m √©rv√©nytelennek t≈±nik, figyelmen k√≠v√ºl hagyva.${RESET}"
            dns_server_2=""
        fi
    fi
    
    echo
    read -p "$(echo -e "${YELLOW_BOLD}Els≈ë kliens neve [$DEFAULT_CLIENT_NAME]: ${RESET}")" unsanitized_client
    [[ -z "$unsanitized_client" ]] && unsanitized_client="$DEFAULT_CLIENT_NAME"
    client=$(sanitize_client_name "$unsanitized_client")
}

# T≈±zfal be√°ll√≠t√°sa
configure_firewall() {
    local INTERFACE
    INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)

    execute_command "echo \"net.ipv4.ip_forward=1\" > /etc/sysctl.d/99-openvpn-forward.conf" "IP tov√°bb√≠t√°s enged√©lyez√©se (sysctl)"
    execute_command "sysctl -q -p /etc/sysctl.d/99-openvpn-forward.conf" "Sysctl be√°ll√≠t√°s alkalmaz√°sa"
    
    if command -v firewalld >/dev/null 2>&1; then
        echo -e "${WHITE_NORMAL}‚öôÔ∏è Firewalld konfigur√°l√°sa...${RESET}"
        execute_command "firewall-cmd --add-masquerade --permanent" "Masquerade enged√©lyez√©se"
        execute_command "firewall-cmd --zone=public --add-port=$port/$protocol --permanent" "OpenVPN port enged√©lyez√©se"
        execute_command "firewall-cmd --reload" "Firewalld √∫jrat√∂lt√©se"
    elif command -v ufw >/dev/null 2>&1; then
        echo -e "${WHITE_NORMAL}‚öôÔ∏è UFW konfigur√°l√°sa...${RESET}"
        # UFW NAT be√°ll√≠t√°s - /etc/ufw/before.rules m√≥dos√≠t√°sa
        local ufw_nat_config="# START OPENVPN RULES
*nat
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -s $VPN_NETWORK_CIDR -o $INTERFACE -j MASQUERADE
COMMIT
# END OPENVPN RULES"
        
        if ! grep -q "# START OPENVPN RULES" /etc/ufw/before.rules; then
            execute_command "sed -i '/^:POSTROUTING ACCEPT \[0:0\]/a\\$ufw_nat_config' /etc/ufw/before.rules" "UFW NAT (masquerade) szab√°ly hozz√°ad√°sa"
            execute_command "ufw allow $port/$protocol" "UFW port enged√©lyez√©se"
            execute_command "ufw reload" "UFW √∫jrat√∂lt√©se"
        else
            echo -e "${YELLOW_BOLD}‚ö†Ô∏è UFW NAT szab√°lyok m√°r l√©teznek, kihagyva a be√°ll√≠t√°st.${RESET}"
            execute_command "ufw allow $port/$protocol" "UFW port enged√©lyez√©se"
        fi
    else 
        echo -e "${WHITE_NORMAL}‚öôÔ∏è Iptables/Netfilter-persistent konfigur√°l√°sa...${RESET}"
        # Masquerade (NAT) a VPN h√°l√≥zat sz√°m√°ra
        execute_command "iptables -t nat -A POSTROUTING -s $VPN_NETWORK_CIDR -o $INTERFACE -j MASQUERADE" "NAT/Masquerade szab√°ly"
        # OpenVPN port enged√©lyez√©se
        execute_command "iptables -A INPUT -p $protocol --dport $port -j ACCEPT" "Port enged√©lyez√©se (INPUT)"
        # Forgalom tov√°bb√≠t√°s (Routing) a TUN interface-en kereszt√ºl
        execute_command "iptables -A FORWARD -s $VPN_NETWORK_CIDR -j ACCEPT" "VPN h√°l√≥zat tov√°bb√≠t√°sa (FORWARD)"
        execute_command "iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT" "Kapcsolatok enged√©lyez√©se (FORWARD)"
        
        if command -v netfilter-persistent >/dev/null 2>&1; then
            execute_command "netfilter-persistent save" "Iptables szab√°lyok ment√©se"
        fi
    fi
}

# client-common.txt l√©trehoz√°sa
get_default_client_common() {
    echo "client
dev tun
proto $protocol
remote $ip $port
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
auth SHA512
cipher AES-256-GCM
ignore-unknown-option block-outside-dns
block-outside-dns
verb 3" > /etc/openvpn/server/client-common.txt
}

# Szerver konfigur√°ci√≥ l√©trehoz√°sa
create_server_config() {
    echo "# OpenVPN 2.6 Server Configuration
local $ip
port $port
proto $protocol
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh.pem
auth SHA512
tls-crypt tc.key
topology subnet
server $VPN_NETWORK_BASE 255.255.255.0
ifconfig-pool-persist ipp.txt
push \"redirect-gateway def1 bypass-dhcp\"" > /etc/openvpn/server/server.conf

    # DNS be√°ll√≠t√°sok
    add_dns_config
    
    # Lok√°lis h√°l√≥zat
    if [[ -n "$local_network_route" ]]; then
        echo "push \"route $local_network_route\"" >> /etc/openvpn/server/server.conf
    fi

    # Egy√©b be√°ll√≠t√°sok
    echo "
user nobody
group $group_name
cipher AES-256-GCM
persist-key
persist-tun
status openvpn-status.log
verb 3
crl-verify crl.pem" >> /etc/openvpn/server/server.conf
    
    # CRL gener√°l√°sa
    cd /etc/openvpn/server/easy-rsa/
    execute_command "EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl" "CRL gener√°l√°sa"
    execute_command "cp pki/crl.pem /etc/openvpn/server/crl.pem" "CRL m√°sol√°sa"
    execute_command "chmod 644 /etc/openvpn/server/crl.pem" "CRL jogosults√°gok be√°ll√≠t√°sa"
    
    return 0
}

# Els≈ë kliens l√©trehoz√°sa (telep√≠t√©s v√©g√©n)
create_first_client() {
    cd /etc/openvpn/server/easy-rsa/
    
    execute_command "./easyrsa --batch gen-req \"$client\" nopass" "Els≈ë kliens tan√∫s√≠tv√°ny k√©r√©se"
    execute_command "./easyrsa --batch sign-req client \"$client\"" "Kliens tan√∫s√≠tv√°ny al√°√≠r√°sa"
    
    execute_command "mkdir -p /etc/openvpn/server/easy-rsa/pki/inline/private/" "Inline mappa l√©trehoz√°sa"
    
    # Inline konfigur√°ci√≥
    {
        echo "<ca>"
        cat /etc/openvpn/server/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key
        echo "</key>"
        echo "<tls-crypt>"
        sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
        echo "</tls-crypt>"
    } > /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline

    # .ovpn f√°jl l√©trehoz√°sa
    if grep -vh '^#' /etc/openvpn/server/client-common.txt /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline > "$ovpn_dir"/"$client".ovpn 2>/dev/null; then
        echo -e "${GREEN_BOLD}‚úÖ Kliens konfigur√°ci√≥ l√©trehozva: $ovpn_dir/$client.ovpn${RESET}"
    else
        echo -e "${RED_BOLD}‚ùå Kliens .ovpn f√°jl l√©trehoz√°sa sikertelen${RESET}"
        return 1
    fi
}

# Sikeres telep√≠t√©s √ºzenet
show_success_message() {
    echo
    echo -e "${GREEN_BOLD}=========================================="
    echo -e "üéâ OPENVPN SIKERESEN TELEP√çTVE!"
    echo -e "=========================================="
    echo -e "${WHITE_NORMAL}üì° Szerver: $ip:$port ($protocol)"
    echo -e "üåê VPN H√°l√≥zat: $VPN_NETWORK_CIDR"
    echo -e "üë§ Els≈ë kliens: $client"
    echo -e "üìÅ Konfigur√°ci√≥: $ovpn_dir/$client.ovpn"
    echo -e "${GREEN_BOLD}==========================================${RESET}"
    echo
    echo -e "${WHITE_NORMAL}K√∂vetkez≈ë l√©p√©sek:"
    echo -e "1. M√°solja a .ovpn f√°jlt a kliensre"
    echo -e "2. Telep√≠tse az OpenVPN kliens szoftvert"
    echo -e "3. Import√°lja a .ovpn f√°jlt"
    echo -e "4. Kapcsol√≥djon a VPN-hez${RESET}"
}

# Kliens hozz√°ad√°sa
add_client() {
    echo
    echo -e "${WHITE_NORMAL}--- ‚ûï √öj Kliens Hozz√°ad√°sa ---${RESET}"
    
    if [[ -z "$ovpn_dir" ]]; then
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg a mapp√°t, ahov√° a .ovpn f√°jlok ker√ºljenek [$DEFAULT_OVPN_DIR]: ${RESET}")" ovpn_dir_input
        [[ -z "$ovpn_dir_input" ]] && ovpn_dir="$DEFAULT_OVPN_DIR" || ovpn_dir="$ovpn_dir_input"
        mkdir -p "$ovpn_dir" 2>/dev/null
    fi
    
    if [[ ! -d "$ovpn_dir" ]]; then
        echo -e "${RED_BOLD}‚ùå Hiba: Nem tudtam l√©trehozni a mapp√°t: $ovpn_dir${RESET}"
        return 1
    fi
    
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg az √∫j kliens nev√©t: ${RESET}")" unsanitized_client
    until [[ -n "$unsanitized_client" ]]; do
        echo -e "${RED_BOLD}‚ùå A kliens n√©v nem lehet √ºres!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Adja meg az √∫j kliens nev√©t: ${RESET}")" unsanitized_client
    done
    client=$(sanitize_client_name "$unsanitized_client")
    
    if [[ -e "/etc/openvpn/server/easy-rsa/pki/issued/$client.crt" ]]; then
        echo -e "${RED_BOLD}‚ùå A '$client' kliens m√°r l√©tezik!${RESET}"
        return 1
    fi
    
    cd /etc/openvpn/server/easy-rsa/
    execute_command "./easyrsa --batch gen-req \"$client\" nopass" "Kliens tan√∫s√≠tv√°ny k√©r√©s√©nek gener√°l√°sa"
    execute_command "./easyrsa --batch sign-req client \"$client\"" "Kliens tan√∫s√≠tv√°ny al√°√≠r√°sa"
    
    mkdir -p /etc/openvpn/server/easy-rsa/pki/inline/private/
    # Inline konfigur√°ci√≥ gener√°l√°sa
    {
        echo "<ca>"
        cat /etc/openvpn/server/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key
        echo "</key>"
        echo "<tls-crypt>"
        sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
        echo "</tls-crypt>"
    } > /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline
    
    # .ovpn f√°jl l√©trehoz√°sa
    if grep -vh '^#' /etc/openvpn/server/client-common.txt /etc/openvpn/server/easy-rsa/pki/inline/private/"$client".inline > "$ovpn_dir"/"$client".ovpn 2>/dev/null; then
        echo
        echo -e "${GREEN_BOLD}‚úÖ **$client** kliens hozz√°adva!${RESET}"
        echo -e "${GREEN_BOLD}üìÅ Konfigur√°ci√≥s f√°jl (kliens sz√°m√°ra): ‚û°Ô∏è $ovpn_dir/$client.ovpn${RESET}"
    else
        echo -e "${RED_BOLD}‚ùå .ovpn f√°jl l√©trehoz√°sa sikertelen. Ellen≈ërizze a jogosults√°gokat!${RESET}"
    fi
}

# Kliensek list√°z√°sa
list_clients() {
    echo
    echo -e "${WHITE_NORMAL}--- üìã OpenVPN Kliensek List√°ja ---${RESET}"
    
    if [[ ! -f /etc/openvpn/server/easy-rsa/pki/index.txt ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek kliensek vagy az OpenVPN nincs telep√≠tve.${RESET}"
        return 1
    fi
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${YELLOW_BOLD}‚ÑπÔ∏è Nincsenek akt√≠v kliensek.${RESET}"
        return 0
    fi
    
    echo -e "${WHITE_NORMAL}üìä Akt√≠v kliensek (√©rv√©nyes tan√∫s√≠tv√°nnyal):${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    # Visszavont kliensek
    REVOKED_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^R")
    if [[ "$REVOKED_CLIENTS" -gt 0 ]]; then
        echo
        echo -e "${RED_BOLD}üö´ Visszavont kliensek:${RESET}"
        tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^R" | cut -d '=' -f 2 | nl -s ') '
    fi
    
    # Kapcsol√≥dott kliensek
    if [[ -f /etc/openvpn/server/openvpn-status.log ]]; then
        echo
        echo -e "${WHITE_NORMAL}üîó Kapcsol√≥d√°si st√°tusz (utols√≥ log alapj√°n):${RESET}"
        CURRENT_VPN_NETWORK_BASE=$(grep '^server ' /etc/openvpn/server/server.conf | awk '{print $2}' 2>/dev/null || echo "10.8.0.0")
        
        CONNECTED_CLIENTS=$(grep "$CURRENT_VPN_NETWORK_BASE" /etc/openvpn/server/openvpn-status.log 2>/dev/null | wc -l || echo 0)
        
        if [[ "$CONNECTED_CLIENTS" -gt 0 ]]; then
            # Megjelen√≠ti a kliens nevet √©s a hozz√°rendelt VPN IP-t
            grep "$CURRENT_VPN_NETWORK_BASE" /etc/openvpn/server/openvpn-status.log 2>/dev/null | awk '{print "  ‚û°Ô∏è " $2 " (" $3 ")"}'
        else
            echo -e "${YELLOW_BOLD}  Nincsenek akt√≠v kapcsolatok.${RESET}"
        fi
    fi
}

# Kliens visszavon√°sa
revoke_client() {
    echo
    echo -e "${WHITE_NORMAL}--- üö´ Kliens Visszavon√°sa ---${RESET}"
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek √©rv√©nyes kliensek!${RESET}"
        return 1
    fi
    
    echo -e "${WHITE_NORMAL}El√©rhet≈ë kliensek:${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a visszavonand√≥ klienst: ${RESET}")" CLIENT_NUMBER
    until [[ "$CLIENT_NUMBER" =~ ^[0-9]+$ && "$CLIENT_NUMBER" -le "$NUMBER_OF_CLIENTS" ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a visszavonand√≥ klienst: ${RESET}")" CLIENT_NUMBER
    done
    
    CLIENT=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENT_NUMBER"p)
    
    cd /etc/openvpn/server/easy-rsa/
    execute_command "./easyrsa --batch revoke \"$CLIENT\"" "Tan√∫s√≠tv√°ny visszavon√°sa"
    execute_command "EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl" "CRL lista friss√≠t√©se"
    rm -f /etc/openvpn/server/crl.pem
    execute_command "cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem" "CRL m√°sol√°sa a szerver mapp√°ba"
    chmod 644 /etc/openvpn/server/crl.pem
    
    execute_command "systemctl restart openvpn-server@server.service" "OpenVPN szolg√°ltat√°s √∫jraind√≠t√°sa (a CRL miatt)"
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ **$CLIENT** kliens visszavonva! (Hozz√°f√©r√©s tiltva a CRL-list√°n)${RESET}"
}

# Kliens teljes t√∂rl√©se
delete_client() {
    echo
    echo -e "${WHITE_NORMAL}--- üóëÔ∏è Kliens Teljes T√∂rl√©se ---${RESET}"
    
    NUMBER_OF_CLIENTS=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ "$NUMBER_OF_CLIENTS" = '0' ]]; then
        echo -e "${RED_BOLD}‚ùå Nincsenek √©rv√©nyes kliensek a t√∂rl√©shez!${RESET}"
        return 1
    fi
    
    echo -e "${WHITE_NORMAL}El√©rhet≈ë kliensek (akiknek van √©rv√©nyes tan√∫s√≠tv√°nya):${RESET}"
    tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | nl -s ') '
    
    read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a t√∂r√∂lni k√≠v√°nt klienst: ${RESET}")" CLIENT_NUMBER
    until [[ "$CLIENT_NUMBER" =~ ^[0-9]+$ && "$CLIENT_NUMBER" -le "$NUMBER_OF_CLIENTS" ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}V√°lassza ki a t√∂r√∂lni k√≠v√°nt klienst: ${RESET}")" CLIENT_NUMBER
    done
    
    CLIENT=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2 | sed -n "$CLIENT_NUMBER"p)
    
    # Meger≈ës√≠t√©s
    echo
    read -p "$(echo -e "${RED_BOLD}‚ö†Ô∏è Biztos, hogy t√∂r√∂lni szeretn√© a(z) '$CLIENT' klienst? (A m≈±velet nem visszavonhat√≥!) [i/N]: ${RESET}")" confirm_delete
    if [[ ! "$confirm_delete" =~ ^[iI]$ ]]; then
        echo -e "${WHITE_NORMAL}‚ÑπÔ∏è T√∂rl√©s megszak√≠tva.${RESET}"
        return 0
    fi
    
    cd /etc/openvpn/server/easy-rsa/
    
    # 1. Kliens visszavon√°sa (fontos l√©p√©s)
    execute_command "./easyrsa --batch revoke \"$CLIENT\"" "Kliens tan√∫s√≠tv√°ny√°nak visszavon√°sa"
    execute_command "EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl" "CRL lista friss√≠t√©se"
    rm -f /etc/openvpn/server/crl.pem
    cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem
    chmod 644 /etc/openvpn/server/crl.pem
    
    # 2. Tan√∫s√≠tv√°ny f√°jlok t√∂rl√©se
    echo -e "${WHITE_NORMAL}üóëÔ∏è Tan√∫s√≠tv√°ny f√°jlok t√∂rl√©se...${RESET}"
    rm -f /etc/openvpn/server/easy-rsa/pki/reqs/"$CLIENT".req 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/private/"$CLIENT".key 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/issued/"$CLIENT".crt 2>/dev/null
    rm -f /etc/openvpn/server/easy-rsa/pki/inline/private/"$CLIENT".inline 2>/dev/null
    
    # 3. .ovpn f√°jl keres√©se √©s t√∂rl√©se (gy√∂k√©r/home/megadott mapp√°kban)
    echo -e "${WHITE_NORMAL}üîç .ovpn f√°jl keres√©se √©s t√∂rl√©se...${RESET}"
    OVPN_FILES=$(find /home /root /tmp "$ovpn_dir" -name "$CLIENT.ovpn" 2>/dev/null)
    if [[ -n "$OVPN_FILES" ]]; then
        for ovpn_file in $OVPN_FILES; do
            echo -e "  üóëÔ∏è T√∂r√∂lve: $ovpn_file"
            rm -f "$ovpn_file"
        done
    else
        echo -e "${YELLOW_BOLD}‚ÑπÔ∏è Nem tal√°lhat√≥ .ovpn f√°jl a klienshez a standard mapp√°kban.${RESET}"
    fi
    
    execute_command "systemctl restart openvpn-server@server.service" "OpenVPN szolg√°ltat√°s √∫jraind√≠t√°sa"
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ **$CLIENT** kliens teljesen t√∂r√∂lve!${RESET}"
}

# OpenVPN elt√°vol√≠t√°sa
remove_openvpn() {
    echo
    echo -e "${WHITE_NORMAL}--- üóëÔ∏è OpenVPN Elt√°vol√≠t√°sa ---${RESET}"
    read -p "$(echo -e "${RED_BOLD}‚ö†Ô∏è Biztos, hogy elt√°vol√≠tja az OpenVPN-t √©s minden konfigur√°ci√≥s f√°jlt? [i/N]: ${RESET}")" remove
    if [[ "$remove" =~ ^[iI]$ ]]; then
        # Konfigur√°ci√≥ kinyer√©se a t≈±zfal t√∂rl√©shez
        port=$(grep '^port ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PORT")
        protocol=$(grep '^proto ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PROTOCOL")
        VPN_NETWORK_CIDR=$(grep '^server ' /etc/openvpn/server/server.conf | awk '{print $2 "/24"}' 2>/dev/null || echo "$VPN_NETWORK_CIDR")

        execute_command "systemctl stop openvpn-server@server" "OpenVPN szolg√°ltat√°s le√°ll√≠t√°sa"
        execute_command "systemctl disable openvpn-server@server" "OpenVPN szolg√°ltat√°s letilt√°sa"
        
        # F√°jlok t√∂rl√©se
        execute_command "rm -rf /etc/openvpn/server" "OpenVPN konfigur√°ci√≥s mappa t√∂rl√©se"
        execute_command "rm -f /etc/sysctl.d/99-openvpn-forward.conf" "Sysctl f√°jl t√∂rl√©se"
        execute_command "sysctl -q -p /etc/sysctl.conf" "Sysctl be√°ll√≠t√°sok vissza√°ll√≠t√°sa"
        
        # T≈±zfal szab√°lyok t√∂rl√©se
        local INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)
        if command -v firewalld >/dev/null 2>&1; then
            execute_command "firewall-cmd --remove-masquerade --permanent" "Firewalld Masquerade elt√°vol√≠t√°sa"
            execute_command "firewall-cmd --zone=public --remove-port=$port/$protocol --permanent" "Firewalld port elt√°vol√≠t√°sa"
            execute_command "firewall-cmd --reload" "Firewalld √∫jrat√∂lt√©se"
        elif command -v ufw >/dev/null 2>&1; then
            execute_command "ufw delete allow $port/$protocol" "UFW port elt√°vol√≠t√°sa"
            # NAT szab√°lyok t√∂rl√©se (csak ha tartalmazza a jel√∂l≈ëket)
            if grep -q "# START OPENVPN RULES" /etc/ufw/before.rules; then
                execute_command "sed -i '/# START OPENVPN RULES/,/# END OPENVPN RULES/d' /etc/ufw/before.rules" "UFW NAT szab√°lyok elt√°vol√≠t√°sa"
                execute_command "ufw reload" "UFW √∫jrat√∂lt√©se"
            fi
        else
            # Iptables szab√°lyok t√∂rl√©se (csak ha l√©teznek)
            execute_command "iptables -t nat -D POSTROUTING -s $VPN_NETWORK_CIDR -o $INTERFACE -j MASQUERADE 2>/dev/null" "NAT/Masquerade szab√°ly t√∂rl√©se"
            execute_command "iptables -D INPUT -p $protocol --dport $port -j ACCEPT 2>/dev/null" "Port enged√©lyez√©s (INPUT) t√∂rl√©se"
            execute_command "iptables -D FORWARD -s $VPN_NETWORK_CIDR -j ACCEPT 2>/dev/null" "VPN h√°l√≥zat tov√°bb√≠t√°s (FORWARD) t√∂rl√©se"
            execute_command "iptables -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT 2>/dev/null" "Kapcsolatok enged√©lyez√©se (FORWARD) t√∂rl√©se"
            if command -v netfilter-persistent >/dev/null 2>&1; then
                execute_command "netfilter-persistent save" "Iptables szab√°lyok ment√©se"
            fi
        fi

        # Szoftver elt√°vol√≠t√°sa
        if [[ "$os" =~ (ubuntu|debian) ]]; then
            execute_command "apt-get remove --purge -y openvpn" "OpenVPN elt√°vol√≠t√°sa"
            execute_command "apt-get autoremove -y" "Felesleges f√ºgg≈ës√©gek t√∂rl√©se"
        elif [[ "$os" == 'centos' ]]; then
            execute_command "yum remove -y openvpn || dnf remove -y openvpn" "OpenVPN elt√°vol√≠t√°sa"
        fi
        
        echo
        echo -e "${GREEN_BOLD}‚úÖ OpenVPN sikeresen elt√°vol√≠tva!${RESET}"
    else
        echo
        echo -e "${WHITE_NORMAL}‚ÑπÔ∏è Elt√°vol√≠t√°s megszak√≠tva.${RESET}"
    fi
}

# OpenVPN telep√≠t√©s (jav√≠tott, jobb hibakezel√©ssel)
install_openvpn() {
    detect_os
    
    echo
    echo -e "${GREEN_BOLD}--- üõ°Ô∏è OpenVPN Telep√≠t√©s El≈ëk√©sz√≠t√©se ---${RESET}"
    
    # Rendszer ellen≈ërz√©s
    if ! system_health_check; then
        echo -e "${RED_BOLD}‚ùå A rendszer nem felel meg a minim√°lis k√∂vetelm√©nyeknek${RESET}"
        exit 1
    fi
    
    # H√°l√≥zati ellen≈ërz√©s
    check_network_connectivity

    # Konfigur√°ci√≥s mappa
    echo
    echo -e "${WHITE_NORMAL}--- üìÅ Kliensf√°jl helye (.ovpn) ---${RESET}"
    read -p "$(echo -e "${YELLOW_BOLD}Adja meg a mapp√°t, ahov√° a .ovpn f√°jlok ker√ºljenek [$DEFAULT_OVPN_DIR]: ${RESET}")" ovpn_dir_input
    [[ -z "$ovpn_dir_input" ]] && ovpn_dir="$DEFAULT_OVPN_DIR" || ovpn_dir="$ovpn_dir_input"
    
    if ! mkdir -p "$ovpn_dir" 2>/dev/null; then
        echo -e "${RED_BOLD}‚ùå Nem siker√ºlt l√©trehozni a mapp√°t: $ovpn_dir${RESET}"
        exit 1
    fi

    # Be√°ll√≠t√°sok gy≈±jt√©se
    setup_vpn_network
    get_network_settings
    get_local_network_route  
    
    echo
    echo -e "${GREEN_BOLD}‚úÖ OpenVPN telep√≠t√©s kezdete.${RESET}"
    read -n1 -r -p "$(echo -e "${YELLOW_BOLD}Nyomjon meg egy gombot a folytat√°shoz...${RESET}")"
	echo

    # --- TELEP√çT√âSI L√âP√âSEK ---
    
    # Csomagok telep√≠t√©se
    if [[ "$os" = "debian" || "$os" = "ubuntu" ]]; then
        execute_command "apt-get update" "Csomaglista friss√≠t√©se"
        execute_command "apt-get install -y --no-install-recommends openvpn openssl ca-certificates iptables netfilter-persistent wget curl" "OpenVPN √©s f√ºgg≈ës√©gek telep√≠t√©se"
    elif [[ "$os" = "centos" ]]; then
        execute_command "dnf install -y epel-release" "EPEL repository hozz√°ad√°sa"
        execute_command "dnf install -y openvpn openssl ca-certificates tar firewalld wget curl" "OpenVPN √©s f√ºgg≈ës√©gek telep√≠t√©se"
    fi

    # EasyRSA telep√≠t√©se
    execute_command "mkdir -p /etc/openvpn/server/easy-rsa" "EasyRSA mappa l√©trehoz√°sa"
    cd /etc/openvpn/server/easy-rsa
    
    if execute_command "wget -O easy-rsa.tgz https://github.com/OpenVPN/easy-rsa/releases/download/v$EASYRSA_VER/EasyRSA-$EASYRSA_VER.tgz" "EasyRSA let√∂lt√©se"; then
        execute_command "tar xzf easy-rsa.tgz --strip-components=1 && rm -f easy-rsa.tgz" "EasyRSA kicsomagol√°sa"
    else
        echo -e "${RED_BOLD}‚ùå EasyRSA let√∂lt√©se sikertelen${RESET}"
        exit 1
    fi

    # PKI inicializ√°l√°s
    execute_command "./easyrsa init-pki" "PKI inicializ√°l√°sa"
    execute_command "./easyrsa --batch build-ca nopass" "CA tan√∫s√≠tv√°ny l√©trehoz√°sa"
    execute_command "./easyrsa --batch gen-req server nopass" "Szerver tan√∫s√≠tv√°ny k√©relem"
    execute_command "./easyrsa --batch sign-req server server" "Szerver tan√∫s√≠tv√°ny al√°√≠r√°sa"
    
    # DH param√©terek gener√°l√°sa (h√°tt√©rben, mivel lass√∫ lehet)
    echo -e "${WHITE_NORMAL}‚è≥ Diffie-Hellman param√©terek gener√°l√°sa (ez eltarthat p√°r percig)...${RESET}"
    ./easyrsa --batch gen-dh > /dev/null 2>&1 &
    local dh_pid=$!
    local dh_attempts=0
    
    while [[ ! -f pki/dh.pem && $dh_attempts -lt 30 ]]; do
        sleep 5
        ((dh_attempts++))
        # echo -e "${WHITE_NORMAL}‚è≥ DH param√©terek gener√°l√°sa... ($(($dh_attempts * 5)) mp)${RESET}"
    done
    
    if [[ -f pki/dh.pem ]]; then
        execute_command "cp pki/dh.pem /etc/openvpn/server/" "DH param√©terek m√°sol√°sa"
    else
        echo -e "${RED_BOLD}‚ùå DH param√©terek gener√°l√°sa id≈ët√∫ll√©p√©s!${RESET}"
        exit 1
    fi

    # Tan√∫s√≠tv√°nyok m√°sol√°sa
    execute_command "cp pki/ca.crt /etc/openvpn/server/" "CA tan√∫s√≠tv√°ny m√°sol√°sa"
    execute_command "cp pki/private/server.key /etc/openvpn/server/" "Szerver kulcs m√°sol√°sa"
    execute_command "cp pki/issued/server.crt /etc/openvpn/server/" "Szerver tan√∫s√≠tv√°ny m√°sol√°sa"

    # TLS kulcs gener√°l√°sa
    execute_command "openvpn --genkey secret /etc/openvpn/server/tc.key" "TLS kulcs gener√°l√°sa"

    # Konfigur√°ci√≥s f√°jlok l√©trehoz√°sa
    get_default_client_common
    
    # server.conf gener√°l√°sa
    if create_server_config; then
        echo -e "${GREEN_BOLD}‚úÖ Szerver konfigur√°ci√≥ l√©trehozva${RESET}"
    else
        echo -e "${RED_BOLD}‚ùå Szerver konfigur√°ci√≥ hib√°s${RESET}"
        exit 1
    fi
    
    # T≈±zfal konfigur√°l√°sa
    configure_firewall

    # Els≈ë kliens l√©trehoz√°sa
    create_first_client

    # Szolg√°ltat√°s ind√≠t√°sa
    execute_command "systemctl daemon-reload" "Systemd daemon reload"
    execute_command "systemctl enable --now openvpn-server@server.service" "OpenVPN szolg√°ltat√°s ind√≠t√°sa"

    # V√©gs≈ë ellen≈ërz√©s
    if validate_openvpn_config && systemctl is-active --quiet openvpn-server@server.service; then
        show_success_message
    else
        echo -e "${RED_BOLD}‚ö†Ô∏è OpenVPN telep√≠tve, de a szolg√°ltat√°s nem fut${RESET}"
        echo -e "${WHITE_NORMAL}Hibakeres√©s: systemctl status openvpn-server@server.service${RESET}"
    fi
}

# F≈ëmen√º
main_menu() {
    clear
    
    # Aktu√°lis konfigur√°ci√≥ kinyer√©se
    if [[ -f /etc/openvpn/server/server.conf ]]; then
        port=$(grep '^port ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PORT")
        protocol=$(grep '^proto ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || echo "$DEFAULT_PROTOCOL")
        ip=$(grep '^local ' /etc/openvpn/server/server.conf | cut -d " " -f 2 2>/dev/null || ip -4 addr | grep inet | grep -vE '127(\.[0-9]{1,3}){3}' | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n1)
        VPN_NETWORK_BASE=$(grep '^server ' /etc/openvpn/server/server.conf | awk '{print $2}' 2>/dev/null || echo "$VPN_NETWORK_BASE")
        VPN_NETWORK_CIDR="$VPN_NETWORK_BASE/24"
    fi
    
    echo -e "${GREEN_BOLD}=========================================="
    echo -e "      üõ°Ô∏è OpenVPN Kezel≈ë Men√º (v1.1)"
    echo -e "=========================================="
    echo -e "    Szerver: $ip ($port/$protocol)"
    echo -e "    VPN H√°l√≥zat: $VPN_NETWORK_CIDR"
    echo -e "==========================================${RESET}"
    echo
    echo -e "${WHITE_NORMAL}V√°lasszon egy opci√≥t:${RESET}"
    echo -e "${WHITE_NORMAL}    1) ‚ûï √öj kliens hozz√°ad√°sa${RESET}"
    echo -e "${WHITE_NORMAL}    2) üìã Kliensek list√°z√°sa (St√°tusz)${RESET}"
    echo -e "${WHITE_NORMAL}    3) üö´ Kliens visszavon√°sa (Hozz√°f. tilt√°s)${RESET}"
    echo -e "${WHITE_NORMAL}    4) üóëÔ∏è Kliens teljes t√∂rl√©se${RESET}"
    echo -e "${WHITE_NORMAL}    5) üîß OpenVPN elt√°vol√≠t√°sa a rendszerr≈ël${RESET}"
    echo -e "${WHITE_NORMAL}    6) üö™ Kil√©p√©s${RESET}"
    echo
    read -p "$(echo -e "${YELLOW_BOLD}Opci√≥: ${RESET}")" option
    until [[ "$option" =~ ^[1-6]$ ]]; do
        echo -e "${RED_BOLD}‚ùå √ârv√©nytelen v√°laszt√°s!${RESET}"
        read -p "$(echo -e "${YELLOW_BOLD}Opci√≥: ${RESET}")" option
    done
    
    case "$option" in
        1) add_client ;;
        2)  
            list_clients
            echo
            read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a folytat√°shoz...${RESET}")"
            ;;
        3) revoke_client ;;
        4) delete_client ;;
        5) remove_openvpn ;;
        6)  
            echo
            echo -e "${GREEN_BOLD}üëã Viszl√°t!${RESET}"
            exit 0
            ;;
    esac
    
    echo
    read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a f≈ëmen√ºh√∂z val√≥ visszat√©r√©shez...${RESET}")"
    main_menu
}

# --- SZKRIPT FUTTAT√ÅSA ---

# F≈ëprogram
main() {
    # Napl√≥z√°s inicializ√°l√°sa
    mkdir -p /var/log 2>/dev/null
    touch /var/log/openvpn-installer.log 2>/dev/null
    chmod 600 /var/log/openvpn-installer.log 2>/dev/null
    
    log_message "INFO" "OpenVPN installer started (v1.1)"
    
    detect_os
    if [[ ! -e /etc/openvpn/server/server.conf ]]; then
        clear
        echo -e "${GREEN_BOLD}üëã √údv√∂z√∂lj√ºk az OpenVPN Telep√≠t≈ëben! (v1.1)${RESET}"
        echo -e "${WHITE_NORMAL}Ez a szkript interakt√≠van be√°ll√≠tja az OpenVPN szervert.${RESET}"
        install_openvpn
        
        echo
        read -p "$(echo -e "${WHITE_NORMAL}Nyomjon Enter-t a f≈ëmen√ºh√∂z val√≥ tov√°bbl√©p√©shez...${RESET}")"
        main_menu
    else
        main_menu
    fi
}

main "$@"
