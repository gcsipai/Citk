#!/bin/bash
#
# Podman management script for Debian 13 (Trixie)
# C√©l: Megb√≠zhat√≥ telep√≠t√©s, rootless be√°ll√≠t√°s, Cockpit √©s a Docker kompatibilit√°s kezel√©se.
# Verzi√≥: 2.1 - Citk 2025
#

# --- Hibakezel√©s √©s Glob√°lis Be√°ll√≠t√°sok ---
set -euo pipefail
IFS=$'\n\t'

# Hiba eset√©n ki√≠rja, melyik sorban, melyik parancs hib√°zott
trap 'error_handler $? $LINENO' ERR

error_handler() {
    local exit_code=$1
    local line_no=$2
    local last_command=${BASH_COMMAND}
    
    echo -e "${RED}‚ùå V√°ratlan hiba t√∂rt√©nt a $line_no sorban a(z) \"$last_command\" parancs futtat√°sa k√∂zben (kil√©p√©si k√≥d: $exit_code)${NC}" >&2
    exit $exit_code
}

# Glob√°lis V√°ltoz√≥k
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_VERSION="2.1"
IS_ROOT=false
CURRENT_USER=""
USER_HOME=""
BASHRC_FILE=""

# Sz√≠nek a kimenethez
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color
readonly BOLD='\033[1m'
readonly UNDERLINE='\033[4m'

# --- Vizu√°lis Seg√©dfunkci√≥k ---

# Sz√≠nes kimenet
print_status() {
    local type=$1
    local message=$2
    case $type in
        "success") echo -e "${GREEN}${BOLD}‚úÖ ${message}${NC}" ;;
        "error") echo -e "${RED}‚ùå ${message}${NC}" >&2 ;;
        "warning") echo -e "${YELLOW}‚ö†Ô∏è  ${message}${NC}" ;;
        "info") echo -e "${BLUE}‚ÑπÔ∏è  ${message}${NC}" ;;
        "highlight") echo -e "${MAGENTA}${BOLD}# ${message}${NC}" ;;
        *) echo "üì¢ ${message}" ;;
    esac
}

# Fejl√©c rajzol√°sa
draw_header() {
    clear
    local title="PODMAN KONT√âNER KEZEL≈ê ESZK√ñZ"
    local version="Verzi√≥: $SCRIPT_VERSION | Debian 13"
    local len_title=${#title}
    local len_version=${#version}
    
    echo -e "${CYAN}${BOLD}‚ïî$(printf '‚ïê%.0s' $(seq 1 $((len_title + 6))))‚ïó${NC}"
    echo -e "${CYAN}${BOLD}‚ïë   ${title}   ‚ïë${NC}"
    echo -e "${CYAN}${BOLD}‚ï†$(printf '‚ïê%.0s' $(seq 1 $((len_title + 6))))‚ï£${NC}"
    echo -e "${MAGENTA}‚ïë $(printf '%*s' $(( (len_title + 6 + len_version) / 2 )) "$version") $(printf '%*s' $(( (len_title + 6 - len_version) / 2 )) "" ) ${MAGENTA}‚ïë${NC}"
    echo -e "${CYAN}${BOLD}‚ïö$(printf '‚ïê%.0s' $(seq 1 $((len_title + 6))))‚ïù${NC}"
    echo ""
}

# --- Rendszer / Logikai Seg√©dfunkci√≥k (v√°ltozatlanul hagytam a konzisztencia √©s megb√≠zhat√≥s√°g miatt) ---

# Root jogosults√°g ellen≈ërz√©se
check_root_privileges() {
    if [[ $EUID -eq 0 ]]; then
        IS_ROOT=true
        print_status "info" "Root jogosults√°gok √©rv√©nyes√≠tve"
    else
        print_status "error" "A szkript futtat√°s√°hoz root jogosults√°g sz√ºks√©ges"
        print_status "info" "K√©rj√ºk, futtassa √∫jra: sudo ./$SCRIPT_NAME"
        exit 1
    fi
}

# Felhaszn√°l√≥i k√∂rnyezet be√°ll√≠t√°sa
set_user_context() {
    if [[ -z "${SUDO_USER:-}" ]]; then
        # Rootk√©nt fut sudo n√©lk√ºl -> megk√©rdezi a felhaszn√°l√≥t
        while true; do
            read -r -p "K√©rj√ºk, adja meg a norm√°l felhaszn√°l√≥nevet a Podman be√°ll√≠t√°shoz: " INPUT_USER
            if id -u "$INPUT_USER" &>/dev/null; then
                CURRENT_USER="$INPUT_USER"
                break
            else
                print_status "error" "A '$INPUT_USER' felhaszn√°l√≥ nem l√©tezik. K√©rj√ºk, pr√≥b√°lja √∫jra."
            fi
        done
    else
        # Rootk√©nt fut sudo-val
        CURRENT_USER="$SUDO_USER"
    fi

    USER_HOME=$(eval echo "~$CURRENT_USER")
    BASHRC_FILE="$USER_HOME/.bashrc"

    if [[ ! -d "$USER_HOME" ]]; then
        print_status "error" "A felhaszn√°l√≥i k√∂nyvt√°r ($USER_HOME) nem tal√°lhat√≥"
        exit 1
    fi
    
    print_status "info" "Be√°ll√≠tand√≥ felhaszn√°l√≥: ${BOLD}$CURRENT_USER${NC}${BLUE} (Home: $USER_HOME)${NC}"
}

# Felhaszn√°l√≥ l√©tez√©s√©nek ellen≈ërz√©se
validate_user() {
    local user=$1
    if ! id -u "$user" &>/dev/null; then
        print_status "error" "A felhaszn√°l√≥ ($user) nem l√©tezik"
        return 1
    fi
    return 0
}

# Parancs futtat√°sa a norm√°l felhaszn√°l√≥k√©nt
run_as_user() {
    local user=$1
    shift
    local command=("$@")
    
    if ! validate_user "$user"; then
        return 1
    fi
    
    # su - be√°ll√≠tja a k√∂rnyezetet, ami elengedhetetlen a rootless funkci√≥khoz
    su - "$user" -c "${command[*]}"
}

# Parancs futtat√°sa systemd --user k√∂rnyezetben (DBus hiba fix√°l√°sa)
run_as_user_systemd() {
    local user=$1
    shift
    local command=("$@")
    
    if ! validate_user "$user"; then
        return 1
    fi

    local user_id
    user_id=$(id -u "$user")
    local xdg_dir="/run/user/$user_id"
    
    # XDG_RUNTIME_DIR l√©trehoz√°sa, ha nem l√©tezik (gyakran hi√°nyzik nem-interakt√≠v su eset√©n)
    if [[ ! -d "$xdg_dir" ]]; then
        mkdir -p "$xdg_dir"
        chown "$user:$user" "$xdg_dir"
    fi

    # K√∂rnyezeti v√°ltoz√≥k explicit √°tad√°sa a systemctl --user sz√°m√°ra
    su - "$user" -c "export XDG_RUNTIME_DIR='$xdg_dir' && export DBUS_SESSION_BUS_ADDRESS='unix:path=$xdg_dir/bus' && ${command[*]}"
}

# Rendszer inform√°ci√≥k gy≈±jt√©se
system_info() {
    print_status "info" "Rendszer inform√°ci√≥k:"
    echo "  OS: $(lsb_release -d | cut -f2-)"
    echo "  Kernel: $(uname -r)"
    echo "  Arch: $(uname -m)"
}

# Csomag telep√≠t√©s el≈ëtti ellen≈ërz√©s
check_package_availability() {
    local packages=("$@")
    local missing_packages=()
    
    print_status "info" "Csomag el√©rhet≈ës√©g ellen≈ërz√©se..."
    
    for package in "${packages[@]}"; do
        if ! apt-cache show "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        print_status "warning" "A k√∂vetkez≈ë csomagok nem √©rhet≈ëk el: ${missing_packages[*]}"
        read -r -p "Folytatja a telep√≠t√©st? (y/N): " response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            print_status "info" "Telep√≠t√©s megszak√≠tva"
            exit 0
        fi
    fi
}

# Podman verzi√≥ ellen≈ërz√©se
check_podman_version() {
    if command -v podman &>/dev/null; then
        local podman_version
        podman_version=$(podman version --format '{{.Client.Version}}' 2>/dev/null || podman version | head -n1 | awk '{print $NF}')
        print_status "success" "Podman verzi√≥: ${BOLD}$podman_version${NC}"
    else
        print_status "error" "Podman nincs telep√≠tve"
        return 1
    fi
}

# Registry konfigur√°ci√≥ be√°ll√≠t√°sa
setup_registry_config() {
    local registry_conf_dir="/etc/containers"
    local registry_conf_file="$registry_conf_dir/registries.conf"
    
    print_status "info" "Registry konfigur√°ci√≥ be√°ll√≠t√°sa..."
    
    if [[ ! -f "$registry_conf_file" ]]; then
        mkdir -p "$registry_conf_dir"
        cat > "$registry_conf_file" << 'EOF'
# Podman registry konfigur√°ci√≥
# Alap√©rtelmezett registry-k keres√©shez

unqualified-search-registries = ["docker.io", "registry.fedoraproject.org", "quay.io"]

[[registry]]
location = "docker.io"

[[registry]]
location = "registry.fedoraproject.org"

[[registry]]
location = "quay.io"
EOF
        print_status "success" "Alap registry konfigur√°ci√≥ l√©trehozva: $registry_conf_file"
    else
        print_status "info" "Registry konfigur√°ci√≥ m√°r l√©tezik. Kihagyva."
    fi
}

# Rootless Podman be√°ll√≠t√°sa
setup_rootless_podman() {
    local user=$1
    
    print_status "highlight" "Rootless Podman Szolg√°ltat√°s Be√°ll√≠t√°sa"
    
    # Linger enged√©lyez√©se
    if loginctl enable-linger "$user"; then
        print_status "success" "Linger enged√©lyezve a(z) $user felhaszn√°l√≥ sz√°m√°ra (session meg≈ërz√©s)"
    else
        print_status "error" "Linger enged√©lyez√©se sikertelen"
        return 1
    fi
    
    # SubID be√°ll√≠t√°s ellen≈ërz√©se
    if ! grep -q "^$user:" /etc/subuid 2>/dev/null; then
        print_status "warning" "SubID be√°ll√≠t√°s sz√ºks√©ges a teljesen rootless m≈±k√∂d√©shez. K√©rem futtassa manu√°lisan: usermod --add-subuids 100000-165535 --add-subgids 100000-165535 $user"
    fi
    
    # Podman socket ind√≠t√°sa
    print_status "info" "Podman socket enged√©lyez√©se √©s ind√≠t√°sa..."
    if run_as_user_systemd "$user" "systemctl --user enable podman.socket --now"; then
        print_status "success" "Podman socket sikeresen enged√©lyezve √©s elind√≠tva"
    else
        print_status "error" "Podman socket ind√≠t√°sa sikertelen"
        return 1
    fi
    
    sleep 2
    if run_as_user_systemd "$user" "systemctl --user is-active podman.socket" &>/dev/null; then
        print_status "success" "Podman socket akt√≠v"
    else
        print_status "error" "Podman socket inakt√≠v. Ellen≈ërizze a hiba√ºzeneteket."
        return 1
    fi
}

# --- F≈ë Funkci√≥k ---

# 1. Podman telep√≠t√©se √©s alapvet≈ë be√°ll√≠t√°sai
main_setup() {
    draw_header
    echo -e "${YELLOW}1. ${BOLD}PODMAN TELEP√çT√âS √âS ROOTLESS BE√ÅLL√çT√ÅS${NC}"
    echo "---------------------------------------------------------"
    
    system_info
    set_user_context

    # Telep√≠t√©si parancsok
    print_status "info" "Rendszer csomaglist√°j√°nak friss√≠t√©se..."
    apt update -qq

    local required_packages=("podman" "podman-compose" "uidmap" "fuse-overlayfs" "slirp4netns" "crun" "buildah" "netavark")
    check_package_availability "${required_packages[@]}"

    print_status "info" "Podman √©s kapcsol√≥d√≥ csomagok telep√≠t√©se..."
    apt install -y "${required_packages[@]}"
    print_status "success" "Podman √©s a sz√ºks√©ges csomagok telep√≠tve"
    
    check_podman_version
    setup_registry_config

    # Aliasok √©s k√∂rnyezeti v√°ltoz√≥k be√°ll√≠t√°sa
    print_status "highlight" "Aliasok √©s Docker Kompatibilit√°s Be√°ll√≠t√°sa"
    local bashrc_addition=$(cat << 'EOF'
# --- Podman Be√°ll√≠t√°sok (Docker kompatibilit√°s) ---
alias docker='podman'
alias docker-compose='podman-compose'
export DOCKER_HOST='unix:///run/user/$(id -u)/podman/podman.sock'
export CONTAINERS_REGISTRIES_CONF='/etc/containers/registries.conf'
# --- End Podman Be√°ll√≠t√°sok ---
EOF
)

    if [[ -f "$BASHRC_FILE" ]]; then
        if ! grep -q "alias docker=podman" "$BASHRC_FILE" 2>/dev/null; then
            echo -e "\n$bashrc_addition" >> "$BASHRC_FILE"
            chown "$CURRENT_USER:$CURRENT_USER" "$BASHRC_FILE"
            print_status "success" "Aliasok √©s DOCKER_HOST hozz√°adva a $BASHRC_FILE f√°jlhoz"
        else
            print_status "info" "Aliasok m√°r l√©teznek a $BASHRC_FILE f√°jlban"
        fi
    else
        print_status "warning" "A $BASHRC_FILE f√°jl nem l√©tezik, aliasok nem lettek hozz√°adva"
    fi

    # Rootless Podman be√°ll√≠t√°sa
    setup_rootless_podman "$CURRENT_USER"

    # Teszt futtat√°sa
    print_status "highlight" "Rootless Teszt Futtat√°sa"
    print_status "info" "Teszt futtat√°sa 'hello-world' k√©ppel..."
    if run_as_user "$CURRENT_USER" "podman pull hello-world && podman run --rm hello-world"; then
        print_status "success" "Hello-world teszt sikeres! üéâ A Podman m≈±k√∂dik."
    else
        print_status "error" "Hello-world teszt sikertelen. Ellen≈ërizze a hiba√ºzeneteket."
    fi
}

# 2. Cockpit √©s Podman komponens telep√≠t√©se
install_cockpit() {
    draw_header
    echo -e "${YELLOW}2. ${BOLD}COCKPIT √âS PODMAN KOMPONENS TELEP√çT√âSE${NC}"
    echo "---------------------------------------------------------"
    
    local cockpit_packages=("cockpit" "cockpit-podman" "cockpit-storaged")
    check_package_availability "${cockpit_packages[@]}"
    
    print_status "info" "Cockpit √©s kapcsol√≥d√≥ csomagok telep√≠t√©se..."
    apt install -y "${cockpit_packages[@]}"
    print_status "success" "Cockpit telep√≠tve"

    # Cockpit szolg√°ltat√°s ind√≠t√°sa
    print_status "info" "Cockpit szolg√°ltat√°s ind√≠t√°sa √©s enged√©lyez√©se..."
    systemctl enable cockpit.socket --now
    print_status "success" "Cockpit socket enged√©lyezve √©s elind√≠tva"
    
    # T≈±zfal be√°ll√≠t√°sa (ha installed)
    if command -v ufw &>/dev/null; then
        ufw allow 9090/tcp comment "Cockpit Web Console"
        print_status "success" "T≈±zfal szab√°ly hozz√°adva a Cockpithoz (9090 port)"
    fi

    local ip_address
    ip_address=$(hostname -I | awk '{print $1}')
    
    print_status "highlight" "Cockpit El√©r√©s"
    echo "  üåê Nyissa meg a b√∂ng√©sz≈ëj√©ben a c√≠met:"
    echo -e "  ${CYAN}${UNDERLINE}https://${ip_address}:9090${NC}"
    echo "  üîê Haszn√°lja a rendszer bejelentkez√©si adatait."
}

# 3. Kont√©nerek list√°z√°sa
list_containers() {
    draw_header
    echo -e "${YELLOW}3. ${BOLD}KONT√âNER LIST√ÅZ√ÅS (Root & Rootless)${NC}"
    echo "---------------------------------------------------------"
    
    set_user_context
    
    print_status "highlight" "Root Kont√©nerek (podman ps -a)"
    if podman ps -a; then
        :
    else
        print_status "warning" "Nem tal√°lhat√≥ root kont√©ner, vagy a Podman nincs megfelel≈ëen telep√≠tve."
    fi
    
    echo ""
    print_status "highlight" "Rootless Kont√©nerek (${CURRENT_USER} - podman ps -a)"
    if run_as_user "$CURRENT_USER" "podman ps -a"; then
        :
    else
        print_status "warning" "Nem tal√°lhat√≥ rootless kont√©ner, vagy a Podman socket nem fut."
    fi
}

# 4. Tiszt√≠t√°s/Karbantart√°s funkci√≥
cleanup() {
    draw_header
    echo -e "${YELLOW}4. ${BOLD}PODMAN RENDSZER KARBANTART√ÅS (PRUNE)${NC}"
    echo "---------------------------------------------------------"
    
    set_user_context
    
    print_status "warning" "Ez a m≈±velet visszavonhatatlanul elt√°vol√≠tja az √ñSSZES nem haszn√°lt kont√©nert, k√©pet √©s k√∂tetet a ${CURRENT_USER} felhaszn√°l√≥n√°l."
    read -r -p "Biztosan folytatja? (y/N): " response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print_status "info" "Karbantart√°s futtat√°sa..."
        if run_as_user "$CURRENT_USER" "podman system prune -f"; then
            print_status "success" "Karbantart√°s befejezve. Hely felszabad√≠tva! üßπ"
        else
            print_status "error" "Karbantart√°s sikertelen."
        fi
    else
        print_status "info" "Karbantart√°s megszak√≠tva."
    fi
}

# 5. Aliasok/Socket Akt√≠v√°l√°s funkci√≥
activate_aliases() {
    draw_header
    echo -e "${YELLOW}5. ${BOLD}ALIASOK √âS SOCKET AKTIV√ÅL√ÅS √öTMUTAT√ì${NC}"
    echo "---------------------------------------------------------"
    
    [[ -z "$CURRENT_USER" ]] && set_user_context

    print_status "highlight" "Be√°ll√≠t√°sok √ârv√©nyes√≠t√©se"
    print_status "info" "A be√°ll√≠t√°sok azonnali √©rv√©nyes√≠t√©s√©hez a ${BOLD}$CURRENT_USER${NC}${BLUE} felhaszn√°l√≥k√©nt:"
    echo "  1. üîÑ Ind√≠tson egy ${BOLD}√∫j termin√°lt${NC} VAGY"
    echo -e "  2. üíª Futtassa: ${CYAN}source $BASHRC_FILE${NC}"
    echo ""

    print_status "highlight" "Podman Socket (Rootless) Ellen≈ërz√©se"
    if run_as_user_systemd "$CURRENT_USER" "systemctl --user status podman.socket --no-pager --lines=5"; then
        print_status "success" "Podman socket ${BOLD}akt√≠v √©s fut${NC}."
    else
        print_status "error" "Podman socket inakt√≠v. K√©rj√ºk, haszn√°lja a 6. opci√≥t a jav√≠t√°shoz."
    fi
}

# 6. Docker kompatibilit√°s ellen≈ërz√©se √©s jav√≠t√°sa
check_docker_compat() {
    draw_header
    echo -e "${YELLOW}6. ${BOLD}DOCKER KOMPATIBILIT√ÅS ELLEN≈êRZ√âSE √âS JAV√çT√ÅSA${NC}"
    echo "---------------------------------------------------------"
    
    set_user_context

    print_status "highlight" "1. Aliasok √©s K√∂rnyezeti V√°ltoz√≥k Ellen≈ërz√©se"
    local alias_ok=true
    
    if grep -q "alias docker=podman" "$BASHRC_FILE" 2>/dev/null && grep -q "export DOCKER_HOST=" "$BASHRC_FILE" 2>/dev/null; then
        print_status "success" "Aliasok √©s DOCKER_HOST be√°ll√≠tva."
    else
        print_status "error" "Aliasok/DOCKER_HOST HI√ÅNYZIK. K√©rj√ºk, futtassa az 1. opci√≥t a jav√≠t√°shoz."
        alias_ok=false
    fi
    echo ""

    print_status "highlight" "2. Podman Rootless Socket Jav√≠t√°s"
    if run_as_user_systemd "$CURRENT_USER" "systemctl --user is-active podman.socket" &>/dev/null; then
        print_status "success" "A podman.socket ${BOLD}akt√≠v${NC}."
    else
        print_status "warning" "A podman.socket ${RED}INAKT√çV${NC}. Megk√≠s√©relj√ºk a jav√≠t√°st..."
        
        if loginctl enable-linger "$CURRENT_USER" && \
           run_as_user_systemd "$CURRENT_USER" "systemctl --user enable podman.socket --now"; then
            print_status "success" "Socket sikeresen elind√≠tva √©s enged√©lyezve."
        else
            print_status "error" "Socket ind√≠t√°sa sikertelen. K√©rem manu√°lis ellen≈ërz√©st: systemctl --user status podman.socket"
            return 1
        fi
    fi
    echo ""

    print_status "highlight" "3. Docker API Teszt (Socket M≈±k√∂d√©se)"
    if run_as_user "$CURRENT_USER" "export DOCKER_HOST=unix:///run/user/\$(id -u)/podman/podman.sock && podman info > /dev/null 2>&1"; then
        print_status "success" "Docker kompatibilit√°s teszt ${BOLD}sikeres${NC}. A Podman API m≈±k√∂dik."
    else
        print_status "error" "Docker kompatibilit√°si hiba. Az API h√≠v√°s sikertelen."
        print_status "info" "Ellen≈ërizze a jogosults√°gokat: ls -la /run/user/\$(id -u $CURRENT_USER)/podman/"
        return 1
    fi
}

# 7. Rendszer √°llapot jelent√©s
system_report() {
    draw_header
    echo -e "${YELLOW}7. ${BOLD}RENDSZER √ÅLLAPOT JELENT√âS${NC}"
    echo "---------------------------------------------------------"
    
    [[ -z "$CURRENT_USER" ]] && set_user_context

    print_status "highlight" "Rendszer & Podman √Ållapot"
    check_podman_version
    echo "  OS: $(lsb_release -d | cut -f2-)"
    
    echo "  Linger √°llapot ($CURRENT_USER): ${BOLD}$(loginctl show-user "$CURRENT_USER" -p Linger --value)${NC}"
    
    echo "  Cockpit: $(systemctl is-active cockpit.socket &>/dev/null && echo -e "${GREEN}‚úÖ Akt√≠v${NC}" || echo -e "${RED}‚ùå Inakt√≠v${NC}")"
    
    if run_as_user_systemd "$CURRENT_USER" "systemctl --user is-active podman.socket" &>/dev/null; then
        echo "  Podman Socket: ${GREEN}‚úÖ Akt√≠v${NC}"
    else
        echo "  Podman Socket: ${RED}‚ùå Inakt√≠v${NC}"
    fi

    print_status "highlight" "Kont√©ner √ñsszefoglal√≥"
    local root_containers
    local user_containers
    root_containers=$(podman ps -a --format "{{.Names}}" 2>/dev/null | wc -l)
    user_containers=$(run_as_user "$CURRENT_USER" "podman ps -a --format '{{.Names}}'" 2>/dev/null | wc -l)

    echo "  Root kont√©nerek (√∂sszes): ${BOLD}$root_containers${NC}"
    echo "  User kont√©nerek (√∂sszes): ${BOLD}$user_containers${NC}"

    print_status "highlight" "Lemez Kihaszn√°lts√°g"
    df -h /var/lib/containers 2>/dev/null || df -h /home 2>/dev/null | grep -E 'Filesystem|home'
}

# Men√º megjelen√≠t√©se √©s f≈ë ciklus
show_menu() {
    while true; do
        draw_header
        echo -e "${CYAN}${BOLD}V√°lasszon egy opci√≥t a Podman kezel√©s√©hez:${NC}"
        echo "---------------------------------------------------------"
        echo -e " ${GREEN}${BOLD}TELEP√çT√âS & ALAPOK${NC}"
        echo -e " 1) ‚öôÔ∏è  Podman Telep√≠t√©s √©s Rootless Be√°ll√≠t√°s"
        echo -e " 2) üåê Cockpit √©s Podman Komponens Telep√≠t√©se"
        echo "---------------------------------------------------------"
        echo -e " ${GREEN}${BOLD}KEZEL√âS & KARBANTART√ÅS${NC}"
        echo -e " 3) üìã Kont√©nerek List√°z√°sa (Root & Rootless)"
        echo -e " 4) üßπ Rendszer Karbantart√°s (prune)"
        echo "---------------------------------------------------------"
        echo -e " ${GREEN}${BOLD}DIAGNOSZTIKA & SEG√âDLETEK${NC}"
        echo -e " 5) üí° Aliasok/Socket Akt√≠v√°l√°s √ötmutat√≥"
        echo -e " 6) üîç Docker Kompatibilit√°s Ellen≈ërz√©se √©s Jav√≠t√°sa"
        echo -e " 7) üìä Rendszer √Ållapot Jelent√©s"
        echo "---------------------------------------------------------"
        echo -e " 8) üö™ ${RED}${BOLD}Kil√©p√©s${NC}"
        echo "---------------------------------------------------------"
        
        read -r -p "V√°laszt√°s [1-8]: " choice
        
        case "$choice" in
            1) main_setup ;;
            2) install_cockpit ;;
            3) list_containers ;;
            4) cleanup ;;
            5) activate_aliases ;;
            6) check_docker_compat ;;
            7) system_report ;;
            8) 
                print_status "info" "Viszl√°t! üëã"
                exit 0 
                ;;
            *) 
                print_status "error" "√ârv√©nytelen v√°laszt√°s ($choice), k√©rj√ºk, pr√≥b√°lja √∫jra (1-8)"
                ;;
        esac
        
        echo ""
        read -r -p "Nyomjon Enter-t a folytat√°shoz..."
    done
}

# --- F≈ë program indul√°sa ---
main() {
    check_root_privileges
    show_menu
}

# Handler a CTRL+C megnyom√°s√°hoz
trap 'echo ""; print_status "info" "Script megszak√≠tva"; exit 0' INT

# Program ind√≠t√°sa
main "$@"
